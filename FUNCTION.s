	INCLUDE DEFINITIONS.s
		
		;CONNECT 4 GAME
	AREA MYCODE, CODE, READONLY
	ENTRY
	
WELCOMEPAGE	
	BL INTIALIZE_VARIABLES
	;BACKGROUND
	MOV R0, #0
	MOV R1, #0
	MOV R3, #320
	MOV R4, #240
	LDR R10, =ZETY
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, #20
	MOV R1, #20
	MOV R3, #300
	MOV R4, #220
	LDR R10, =GREY
	BL DRAW_RECTANGLE_FILLED

	;WELCOME
	MOV R6, #85
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_W
	 
	MOV R6, #108
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_E
	
	MOV R6, #129
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_L
	
	MOV R6, #147
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_C
	
	MOV R6, #163
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_O
	
	MOV R6, #180
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_M
	
	MOV R6, #203
	MOV R7, #30
	LDR R8, =ZETY
	BL DRAW_E
	
	;CHOOSE
	MOV R6, #100
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_C
	
	MOV R6, #115
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_H
	

	MOV R6, #134
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_O
	

	MOV R6, #155
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_O
	

	MOV R6, #174
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_S


	MOV R6, #188
	MOV R7, #60
	LDR R8, =ZETY
	BL DRAW_E


	BL DRAW_GAME_1
	BL DRAW_GAME_2
	BL SELECT_1
	
	LDR R0, =SELECTED_GAME
	MOV R10, #1
	STRH R10, [R0]

	;CHECK FOR UP PRESS	
WELCOMELOOP

	LDR R0, =GPIOB_IDR_OFFSET
	
	B BYEB
	LTORG
BYEB
	
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#10
	AND R1,R1,R2
	CMP R1,#0
	BEQ NOT_1
	BL DRAW_GAME_2
	BL SELECT_1
	
	LDR R0, =SELECTED_GAME
	MOV R10, #1
	STRH R10, [R0]


NOT_1

	;CHECK FOR DOWN PRESS	

	LDR R0, =GPIOC_IDR_OFFSET
	B NOT1
	LTORG
NOT1
	
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#14
	AND R1,R1,R2
	CMP R1,#0
	BEQ TANY
	BL DRAW_GAME_1
	BL SELECT_2
	
	LDR R0, =SELECTED_GAME
	MOV R10, #2
	STRH R10, [R0]

	

TANY

	LDR R0, =GPIOA_IDR_OFFSET
	B SKIP12
	LTORG
SKIP12

	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#9
	AND R1,R1,R2
	CMP R1,#0
	BEQ WELCOMELOOP
;START GAME

STARTGAME
	LDR R0, =SELECTED_GAME
	LDRH R1, [R0]
	CMP R1, #2
	BEQ HLA
	B NOTHLA
HLA
	BL CONNECT4	
NOTHLA
	BL delay_100_milli_second	
	
	LDRH R1, [R0]
	CMP R1, #1
	BEQ BOLBOL
	B NOTBOLBOL
BOLBOL
	BL BREAKOUT	
NOTBOLBOL
	BL delay_100_milli_second	
	B WELCOMELOOP		
	

	ENDFUNC
;CONNECT 4 GAME
CONNECT4  
	PUSH{R0-R12,LR}
	;BACKGROUND
	BL INTIALIZE_VARIABLES
	MOV R0, #0
	MOV R1, #0
	MOV R3, #320
	MOV R4, #240
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	;BLUE BASE
	MOV R0, #34
	MOV R1, #70
	MOV R3, #286
	MOV R4, #242
	LDR R10, =BLUE
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, #5
	MOV R1, #230
	MOV R3, #315
	MOV R4, #240
	LDR R10, =BLUE
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, #10
	MOV R1, #230
	MOV R3, #310
	MOV R4, #233
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #86
	LDR R10, =BLACK
	MOV R7, #7
	MOV R8, #6
DRAW_COLUMN
    
	MOV R5, #58
DRAW_ROW
	
	BL DRAW_CIRCLE_FILLED
	ADD R5, R5, #34
	SUBS R7, R7, #1
	CMP R7, #0
	BGT DRAW_ROW
	ADD R6, R6, #26
    SUBS R8, R8, #1
	MOV R7, #7
	CMP R8, #0
	BGT DRAW_COLUMN
	
	BL RED_TURN
	BL DrawRedPlayersCoin
	LDR R10, =YELLOW
	BL DRAW_ARROW
	
	
	

	;E
	
	MOV R6, #200
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_E
	;X GAP=8 PIXELS
	MOV R6, #220
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_X
	
	;I GAP=8 PIXELS
	MOV R6, #241
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_I
	
	;T GAP=8 PIXELS
	MOV R6, #256
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_T
	
	;2 DOTS
	MOV R0, #275
	MOV R1, #10
	MOV R3, #280
	MOV R4, #15
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED

	MOV R0, #275
	MOV R1, #20
	MOV R3, #280
	MOV R4, #25
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #284
	MOV R7, #5
	LDR R8, =BLUE
	BL DRAW_0


CONNECT4LOOP
	
	
	LDR R0, =GPIOA_IDR_OFFSET
	B NOT3
	LTORG
NOT3
	
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#8
	AND R1,R1,R2
	CMP R1,#0
	BEQ EXITTANY
	B WELCOMEPAGE
EXITTANY
	
	
	
	
	BL CHECK_WON
	BL CHECK_TIE
	LDR R0, =GPIOB_IDR_OFFSET
	B SKIP121
	LTORG
SKIP121
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#11
	AND R1,R1,R2
	CMP R1,#0
	BEQ C4NOTRIGHT
	BL MOVE_RIGHT
C4NOTRIGHT
	; CHECK FOR LEFT PRESS
	LDR R0, =GPIOB_IDR_OFFSET
	B SKIP13
	LTORG
SKIP13
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#10
	AND R1,R1,R2
	CMP R1,#0
	BEQ C4NOTLEFT
	BL MOVE_LEFT
C4NOTLEFT
	; CHECK FOR DOWN PRESS
	LDR R0, =GPIOC_IDR_OFFSET
	B SKIP14
	LTORG
SKIP14
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#14
	AND R1,R1,R2
	CMP R1,#0
	BEQ C4NOTDOWN
	BL INSERT
C4NOTDOWN	
	BL delay_200_milli_second
	B CONNECT4LOOP
	POP{R0-R12,PC}
	
		


;**************************************************************************************************************


BREAKOUT
	BL INTIALIZE_VARIABLES
	;FINAL TODO: DRAW THE ENTIRE SCREEN WITH A CERTAIN COLOR
	;BACKGROUND
	
	
	
	MOV R0, #0
	MOV R1, #0
	MOV R3, #320
	MOV R4, #240
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	;green and purple lines
	MOV R0, #0
	LDR R1, =GREEN_LINE
	MOV R3, #320
	MOV R4, #42
	LDR R10, =GREEN
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, #0
	MOV R1, #187
	MOV R3, #320
	MOV R4, #190
	LDR R10, =MAGENTA
	BL DRAW_RECTANGLE_FILLED
	
	;YELLOW PAD
	MOV R6, #120
	LDR R0, =PAD_X
	STRH R6, [R0]
	MOV R7, #225
	LDR R8, =YELLOW
	B SKIP1
	LTORG
	
SKIP1
	BL DRAW_PAD

	LDR R10, =WHITE
	BL DRAW_BALL
	
	;letters drawing WIDTH=10  LENGTH=5
	;S
	
	MOV R6, #10
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_S
	
	;C   GAP=8PIXELS
	
	MOV R6, #28
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_C
		
		
	;O GAP=8 PIXELS
	MOV R6, #46
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_O
	
	;R GAP=8 PIXELS
	MOV R6, #64
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_R
	
	;E GAP=8 PIXELS
	MOV R6, #84
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_E
	
	;2 DOTS
	MOV R0, #105
	MOV R1, #10
	MOV R3, #110
	MOV R4, #15
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED

	MOV R0, #105
	MOV R1, #20
	MOV R3, #110
	MOV R4, #25
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED
	
	
	
	MOV R6, #200
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_E
	;X GAP=8 PIXELS
	MOV R6, #220
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_X
	
	;I GAP=8 PIXELS
	MOV R6, #241
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_I
	
	;T GAP=8 PIXELS
	MOV R6, #256
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_T
	
	;2 DOTS
	MOV R0, #275
	MOV R1, #10
	MOV R3, #280
	MOV R4, #15
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED

	MOV R0, #275
	MOV R1, #20
	MOV R3, #280
	MOV R4, #25
	LDR R10, =YELLOW
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #284
	MOV R7, #5
	LDR R8, =BLUE
	BL DRAW_0
	;blocks drawing
	;R5 stores x1 of block
	;R7 stores y1 
	;R4 stores y2
	;R3 stores X2
	
	
	;MOV R12, #5
	LDR R0, =BRICKS_X
	LDRH R12, [R0]
	LDR R0, =BRICKS_Y
	LDRH R7, [R0]
	LDR R8,=RED
	BL DRAW_BRICKS2

	MOV R10, #0

GAMELOOP
	;CHECK FOR RIGHT PRESS
	;R10 IS TIME
	BL UPDATE_SCORE
	LDR R0, =SCORE
	LDRH R1, [R0]
	CMP R1, #60
	BGE QW123456
	
	
	MOV R1, #0
	LDR R0, =GPIOB_IDR_OFFSET
	LDR R1,[R0]
	B KJDNGOUE409
	LTORG
KJDNGOUE409
	MOV R2,#1
	LSL R2,#11
	AND R1,R1,R2
	CMP R1,#0
	BEQ NOTRIGHT
	BL MOVE_PAD_RIGHT
NOTRIGHT
	; CHECK FOR LEFT PRESS
	MOV R1, #0
	LDR R0, =GPIOB_IDR_OFFSET
	LDR R1,[R0]
	B KJDNGOUE410
	LTORG
KJDNGOUE410
	MOV R2,#1
	LSL R2,#10
	AND R1,R1,R2
	CMP R1,#0
	BEQ NOTLEFT
	BL MOVE_PAD_LEFT
NOTLEFT
    ;CHECK FOR EXIT
	LDR R0, =GPIOB_IDR_OFFSET
	LDR R1,[R0]
	B KJDNGOUE411
	LTORG
KJDNGOUE411
	MOV R2,#1
	LSL R2,#8
	AND R1,R1,R2
	CMP R1,#0
	BEQ NOTEXIT
	B EXITTTT
	LTORG
EXITTTT
	;CALL FUNCTION EXIT

    B CONT_GAMED_FASH5
QW123456
    B QW1234
	
CONT_GAMED_FASH5	
NOTEXIT

    MOV R0, #0
	MOV R1, #187
	MOV R3, #320
	MOV R4, #190
	LDR R10, =MAGENTA
	BL DRAW_RECTANGLE_FILLED
	BL UPDATE_BALL_POSITION
	
	
	BL DETECT_BRICK_COLLISON
	
	LDR R8, =RED
	BL DRAW_BRICKS2
	LDR R10, =WHITE
	BL DRAW_BALL	
 
    

	
	;MOVING BRICKS
	LDR R0, =ITERATION
	B BYE12
	LTORG
BYE12
	LDRH R6, [R0]
	CMP R6, #4		;MOVE BRICK DOWN EVERY 4 SECOND
	BEQ BRICKMOVE
	ADD R6, R6, #1
	STRH R6, [R0]
	B CHECK_BALL_LOST
CHECK_CONT4
	B DONTMOVE
	
CHECK_BALL_LOST
    MOV R1, #0
	LDR R0, =BALL_X
	B SKIPLTORG
	LTORG
SKIPLTORG
	LDRH R1, [R0]
	LDR R0, =BALL_Y
	MOV R2, #0
	LDRH R2, [R0]
	MOV R3, #0
	LDR R0, =PAD_X
	B GGHDFJ
	LTORG
GGHDFJ
	LDRH R3, [R0]
	ADD R1, R1, #10
	CMP R1, R3
    BLE BALL_BEFORE_PAD
	MOV R4, #0
CHECK_CONT 
	ADD R3, R3 ,#103
    SUB R1, R1, #20
	CMP R1, R3
	BGT BALL_AFTER_PAD
	MOV R5, #0
CHECK_CONT2
	
	ORR R7, R5, R4
	
	LDR R0, =BALL_Y
	B HGHGH
	LTORG
HGHGH
	MOV R2, #0
	LDRH R2, [R0]
	MOV R6, #0
	LDR R6, =PAD_Y
	SUB R6, R6, #25
	CMP R2, R6
	BGE BALL_MISSED
	MOV R8, #0
CHECK_CONT3
	
	AND R8, R8, R7
	CMP R8, #1
	BEQ GAMEOVER
	B CHECK_CONT4
	
	
    B BRICKMOVE
BALL_BEFORE_PAD
    MOV R4, #1
    B CHECK_CONT
BALL_AFTER_PAD
    MOV R5, #1
	B CHECK_CONT2
BALL_MISSED
    MOV R8, #1
	B CHECK_CONT3
	
BRICKMOVE
	MOV R6,#0
	STRH R6, [R0]
	ADD R12, R12, #5
	BL FIND_GREATEST_LAST_Y
	LDR R0, =GREATEST_LY
	B DFDGHFFJ
	LTORG
DFDGHFFJ
	LDRH R7, [R0]
	MOV R11, R7
	ADD R11, #6
	CMP R11, #190
	BGE GAMEOVER
	

	
	LDR R0, =BRICKS_Y
		B DFDGHFFJ1
	LTORG
DFDGHFFJ1
	LDRH R7, [R0]
	BL DRAW_BLACK
	ADD R7, R7, #1
	STRH R7, [R0]
	LDR R0, =BRICKS_LY

     
    ; increment LAST_YS array
    BL INC_LAST_YS
	
	LDRH R11, [R0]
	ADD R11, R11, #1
	STRH R11, [R0]
	LDR R8, =RED
	BL DRAW_BRICKS2

DONTMOVE

	BL delay_100_milli_second
	BL delay_100_milli_second
	BL delay_100_milli_second

	B GAMELOOP 	
 	
QW1234
    B WON_GAME
	
	
	
GAMEOVER

	;BEEEP
	LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	ORR R1, R1, R2
	STRH R1, [R0]

    MOV R0, #50
	MOV R1, #50
	MOV R3, #250
	MOV R4, #150
	LDR R10, =WHITE
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #75
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_Y
	
	MOV R6, #100
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_O
	
	MOV R6, #120
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_U
	
	MOV R6, #155
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_L
	
	MOV R6, #175
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_O
	
	MOV R6, #195
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_S
	
	MOV R6, #210
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #75
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_C
	
	MOV R6, #90
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_N
	
	MOV R6, #115
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #90
	LDR R8, =BLUE
	BL DRAW_0
	
	
	MOV R6, #75
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #90
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_X
	
	MOV R6, #115
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #120
	LDR R8, =BLUE
	BL DRAW_O	

    LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	ORR R1, R1, R2
	STRH R1, [R0]
    B LAST_END	

WON_GAME
	;BEEP
	LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	ORR R1, R1, R2
	STRH R1, [R0]


    MOV R0, #50
	MOV R1, #50
	MOV R3, #250
	MOV R4, #150
	LDR R10, =WHITE
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #75
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_Y
	
	MOV R6, #100
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_O
	
	MOV R6, #120
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_U
	
	MOV R6, #155
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_W
	
	MOV R6, #175
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_O
	
	MOV R6, #195
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_N
	
	
	MOV R6, #75
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_C
	
	MOV R6, #90
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_N
	
	MOV R6, #115
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #90
	LDR R8, =BLUE
	BL DRAW_0
	
	
	MOV R6, #75
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #90
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_X
	
	MOV R6, #115
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #120
	LDR R8, =BLUE
	BL DRAW_O	

    LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	ORR R1, R1, R2
	STRH R1, [R0]
    B LAST_END
	

LAST_END



;EXIT
	LDR R0, =GPIOA_IDR_OFFSET
	B SKIP12111
	LTORG
SKIP12111
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#8
	AND R1,R1,R2
	CMP R1,#0	
	BEQ SKIP1412
	B WELCOMEPAGE
;CONTINUE
	B SKIP1412
	LTORG
SKIP1412
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#9
	AND R1,R1,R2
	CMP R1,#0
	BEQ LAST_END
	B BREAKOUT
	ENDFUNC

INC_LAST_YS FUNCTION
	PUSH {R0-R12, LR}
	LDR R0, =LAST_YS
	MOV R1, #0
INC_LOOP
    CMP R1, #56
	BGT EXIT_INC_LOOP
	LDR R0, =LAST_YS
	ADD R0, R0, R1
	LDR R2,[R0]
	ADD R2, R2, #1
	STR R2, [R0]
    ADD R1, R1, #4	
	B INC_LOOP
	
EXIT_INC_LOOP
	POP {R0-R12, PC}
	ENDFUNC

FIND_GREATEST_LAST_Y FUNCTION
	PUSH {R0-R12, LR}
	LDR R0, =LAST_YS
	LDR R1, [R0]
	
	MOV R2, #0
	
	MOV R3, R1  ; R3 STORES THE GREATEST 
	
GREATEST_LOOP
    CMP R2, #56
	BGT EXIT_GREATEST_LOOP

    LDR R0, =LAST_YS
	ADD R0, R0, R2
	LDR R1, [R0]
	CMP R1, R3
	BGT FOUND_NEW_GREATEST
	B GREATEST_CONT
FOUND_NEW_GREATEST
    MOV R3, R1
	
GREATEST_CONT
    ADD R2, R2, #4
	B GREATEST_LOOP
	
EXIT_GREATEST_LOOP
    LDR R0, =GREATEST_LY
	STR R3, [R0]
	POP {R0-R12, PC}
	ENDFUNC


DETECT_BRICK_COLLISON FUNCTION
	PUSH {R0-R12, LR}
	LDR R0,=LAST_YS ; index
	B JKJK
	LTORG
JKJK
	MOV R1, #0 
CHECK_LOOP
    CMP R1, #56
	BEQ q1234
	LDR R0,=LAST_YS
	B HJNHJN
	LTORG
HJNHJN
	ADD R0, R0, R1
	LDR R2,[R0]
	MOV R9,#0x00000000
	ADD R9,#0xFF000000
	ADD R9,#0x00FF0000
    AND R9, R2, R9
    LSR R9, #16	
	LDR R3, =BALL_X
	B BNM
	LTORG
BNM
	LDRH R4, [R3]
	CMP R4, R9
	BGE INSIDE_BRICK
	ADD R1, R1, #4
	B CHECK_LOOP
INSIDE_CONT
	LDR R5, =BALL_Y
	B VGBVGB
	LTORG
VGBVGB
	LDRH R6, [R5]
	LDR R0,=LAST_YS
	B LOLOL
	LTORG
LOLOL
	ADD R0, R0, R1
	LDR R2,[R0]
	MOV R10, #0x0000FFFF
	AND R10, R2, R10
	ADD R10, #6
	CMP R6, R10
	BLE BREAK_BRICK
	
	B INSIDE_CONT2
INSIDE_BRICK
    ADD R9, R9, #20
	CMP R4, R9
	BLE INSIDE_CONT
	ADD R1, R1, #4
	B CHECK_LOOP
BREAK_BRICK
	;SUB R10, R10, #6
	;STRH R10, [R0]
	; CODE TO REFLECT BALL
	LDR R0, =SPEED_YD

	LDRH R2, [R0]
	MOV R2, #1
	STRH R2, [R0]
	LDR R0, =SPEED_X
	LDRH R12, [R0]
	B KJDNGOUE414
	LTORG
KJDNGOUE414
	MOV R12, #0x14
	STRH R12, [R0]
	
	LDR R0,=LAST_YS
	ADD R0, R0, R1
	LDR R2, [R0]
	B KJDNGOUE415
	LTORG
KJDNGOUE415
	MOV R7,#0x00000000
	ADD R7,#0xFF000000
	ADD R7,#0x00FF0000
    AND R7, R2, R7
    LSR R7, #16
    MOV R11, #0
    ADD R11, R7, #17
	B CONTTTTTT
q1234
    B EXITTT44
CONTTTTTT
	LDR R0,=LAST_YS
	ADD R0, R0, R1
	LDR R2,[R0]
	B KJDNGOUE416
	LTORG
KJDNGOUE416
	MOV R8, #0x0000FFFF
	AND R8, R2, R8
	
	PUSH {R8}
	LDR R0, =SCORE
	LDRH R8, [R0]
	ADD R8, R8, #1
	STRH R8, [R0]
	POP {R8}
	
	MOV R12, #0
	ADD R12, R8, #6
	BL COVER_BRICK
	
	LDR R0,=LAST_YS
	ADD R0, R0, R1
	LDR R2,[R0]
	B KJDNGOUE417
	LTORG
KJDNGOUE417
	SUB R2, R2, #10
	STR R2, [R0]
	B EXITTT44
	
INSIDE_CONT2
    ADD R1, R1, #4
	B CHECK_LOOP
		
EXITTT44
	POP {R0-R12, PC}
ENDFUNC

COVER_BRICK FUNCTION
	PUSH {R0-R12, LR}
	MOV R0, R7
	MOV R1, R8
	MOV R3, R11
	MOV R4, R12
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	POP {R0-R12, PC}
    ENDFUNC

DRAW_BALL FUNCTION
	PUSH {R0-R12, LR}
	
	LDR R0, =BALL_X
	LDRH R6,[R0]
	LDR R0, =BALL_Y
	B GGGG
	LTORG
GGGG
	LDRH R7,[R0]
	
	; ball
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #13
	MOV R4, R7
	ADD R4, R4, #8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #2
	MOV R1, R7
	SUB R1, R1, #3
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #11
	BL DRAW_RECTANGLE_FILLED
	
	POP {R0-R12, PC}
    ENDFUNC
	
;COVER BETWEEN GREEN AND PURPLE BLACK
DRAW_BLACK FUNCTION
	PUSH {R0-R12, LR}
	;R7 Y1
	MOV R0, #0
	MOV R1, #47
	MOV R3, #320
	MOV R4, #187
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R12, PC}
    ENDFUNC


;DRAW BRICKS
DRAW_BRICKS FUNCTION
	PUSH {R0-R12, LR}
;R12= STARTING X POSITION
;R7 START Y
;R6 LAST BRICK IN X
;R11 LAST BRICK IN Y
	LDR R0, =BRICKS_X
	LDRH R12, [R0]
	LDR R0, =BRICKS_LAST
	LDRH R6, [R0]
	LDR R0, =BRICKS_Y
	LDRH R7, [R0]
DRAW_column
	MOV R5, R12
	
	

DRAW_row
	
	MOV R0, R5
	MOV R1, R7
	ADD R5, R5, #17
	MOV R3, R5
	MOV R4, R7
	ADD R4, R4, #6
	MOV R10, R8
	
	BL DRAW_RECTANGLE_FILLED
	ADD R5, R5, #4
	CMP R5, R6
	BLT DRAW_row
	ADD R7, R7, #10
	LDR R0, =BRICKS_LY
	LDRH R11, [R0]
	CMP R7, R11
	BLT DRAW_column




	POP {R0-R12, PC}
    ENDFUNC
	
DRAW_BRICKS2 FUNCTION 
	PUSH {R0 - R12, LR}
	;R12= STARTING X POSITION
    ;R7 START Y
    ;R6 LAST BRICK IN X
    ;R11 LAST BRICK IN Y
	LDR R0, =BRICKS_X
	LDRH R12, [R0]
	LDR R0, =BRICKS_LAST
	LDRH R6, [R0]
	
	
	
	MOV R5, R12 ; R5 TRACES X IN THE OUTER LOOP
    MOV R8, #0 
DRAW_ROW2
	LDR R0, =BRICKS_Y
	LDRH R7, [R0]
 
	LDR R0, =BRICKS_LAST
	LDRH R6, [R0]
	ADD R5, R5, #17
	CMP R5, R6
	BGE EXIT_DRAW_BRICK
	SUB R5, R5, #17
	
	
DRAW_COL2
		
	LDR R0,=LAST_YS
	ADD R0, R0, R8
	LDR R2,[R0]
	MOV R9,#0x0000FFFF
    AND R9, R2, R9
	
	MOV R0, R5
	MOV R1, R7
	MOV R3, R0
	ADD R3, R3, #17
	MOV R4, R1
	ADD R4, R4, #6
	
	ADD R9, R9, #7
	CMP R4, R9 ;CHECK IF REACHED END OF COLUMN
	BGE NEXTDRAW_ROW
	
	CMP R8, #56
	BGT NEXTDRAW_ROW
	
	LDR R10, =RED 
	BL DRAW_RECTANGLE_FILLED
	
	;ADD R8, R8, #4
	ADD R7, R7, #10
	B DRAW_COL2
	
	
NEXTDRAW_ROW
    ADD R8, R8, #4
	ADD R5, R5, #21
	B DRAW_ROW2
	
	
EXIT_DRAW_BRICK
	POP {R0-R12, PC}
    ENDFUNC
	
DRAW_PAD FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 120
	;R7=y1 225
	;R8=color
	LDR R0, =PAD_X
	LDRH R6, [R0]

	LDR R7, =PAD_Y
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #80
	MOV R4, R7
	ADD R4, R4, #10
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #5
	MOV R1, R7
	ADD R1, R1, #2
	MOV R3, R6
	ADD R3, R3, #85
	MOV R4, R7
	ADD R4, R4, #7
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	
	POP {R0-R8, r10, PC}
	ENDFUNC
	


MOVE_PAD_LEFT FUNCTION
    PUSH {R0-R8, r10, LR}
	
	;check boundaries
	LDR R0, =PAD_X
	LDRH R6, [R0]
	CMP R6, #5
	BLE FUNCEXIT
	;coordinates of upper left corner
	;R6=x1 120
	;R7=y1 225
	;R8=color
	;COVER THE RIGHT PART WITH BLACK
	MOV R7, #225
	MOV R0, R6
	ADD R0, R0, #45
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #85
	MOV R4, R7
	ADD R4, R4, #10
	LDR R10, =BLACK 
	BL DRAW_RECTANGLE_FILLED
	
	SUB R6, R6, #40
	LDR R0, =PAD_X
	STRH R6, [R0]
	LDR R8, =YELLOW
	BL DRAW_PAD

FUNCEXIT

	POP {R0-R8, r10, PC}
	ENDFUNC

UPDATE_SCORE FUNCTION
	PUSH {R0-R12, LR}
    
	MOV R0, #115
	MOV R1, #5
	MOV R3, #171
	MOV R4, #35
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED	
 
	LDR R0, =SCORE
	LDRH R4, [R0]
	B KAKAD
	LTORG
KAKAD

    MOV R1, R4          
    MOV R2, R4
    MOV R3, R4

    ; Get the hundreds digit
	
    MOV R5, #100
    SDIV R1, R1, R5     ; Divide by 100

	MOV R8, #100

    MUL R6, R1, R8
	SUB R4, R4, R6
	MOV R8, #10
    SDIV R2, R4, R8     ; Divide by 10

    ; Get the ones digit
	MOV R8, #10
	MUL R7, R2, R8
	SUB R3, R4, R7
	
	;R1   100
	;R2	   20
	;R3		1
	
	; drawing first digit
	
    CMP R1, #0
	BEQ ONE_0
	B CONT_0
ONE_0
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_0	

CONT_0
	CMP R1, #1
	BEQ ONE_1
	B CONT_1
ONE_1
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_1
	
CONT_1
	CMP R1, #2
	BEQ ONE_2
	B CONT_2
ONE_2
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_2

CONT_2
	CMP R1, #3
	BEQ ONE_3
	B CONT_3
ONE_3
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_3

CONT_3
	CMP R1, #4
	BEQ ONE_4
	B CONT_4
ONE_4
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_4


CONT_4
	CMP R1, #5
	BEQ ONE_5
	B CONT_5
ONE_5
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_5

CONT_5
	CMP R1, #6
	BEQ ONE_6
	B CONT_6
ONE_6
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_6
	
CONT_6
	CMP R1, #7
	BEQ ONE_7
	B CONT_7
ONE_7
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_7
	
CONT_7
	CMP R1, #8
	BEQ ONE_8
	B CONT_8
ONE_8
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_8

CONT_8
	CMP R1, #9
	BEQ ONE_9
	B CONT_9
ONE_9
    MOV R6, #115
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_9

CONT_9

; drawing second digit

    CMP R2, #0
	BEQ TWO_0
	B CONT2_0
TWO_0
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_0

CONT2_0
    CMP R2, #1
	BEQ TWO_1
	B CONT2_1
TWO_1
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_1
	
CONT2_1
	CMP R2, #2
	BEQ TWO_2
	B CONT2_2
TWO_2
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_2

CONT2_2
	CMP R2, #3
	BEQ TWO_3
	B CONT2_3
TWO_3
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_3

CONT2_3
	CMP R2, #4
	BEQ TWO_4
	B CONT2_4
TWO_4
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_4


CONT2_4
	CMP R2, #5
	BEQ TWO_5
	B CONT2_5
TWO_5
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_5

CONT2_5
	CMP R2, #6
	BEQ TWO_6
	B CONT2_6
TWO_6
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_6
	
CONT2_6
	CMP R2, #7
	BEQ TWO_7
	B CONT2_7
TWO_7
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_7
	
CONT2_7
	CMP R2, #8
	BEQ TWO_8
	B CONT2_8
TWO_8
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_8

CONT2_8
	CMP R2, #9
	BEQ TWO_9
	B CONT2_9
TWO_9
    MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_9

CONT2_9

; DRAWING THIRD DIGIT
	
    CMP R3, #0
	BEQ THREE_0
	B CONT3_0
THREE_0
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_0
	
CONT3_0
    CMP R3, #1
	BEQ THREE_1
	B CONT3_1
THREE_1
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_1
	
CONT3_1
	CMP R3, #2
	BEQ THREE_2
	B CONT3_2
THREE_2
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_2

CONT3_2
	CMP R3, #3
	BEQ THREE_3
	B CONT3_3
THREE_3
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_3

CONT3_3
	CMP R3, #4
	BEQ THREE_4
	B CONT3_4
THREE_4
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_4


CONT3_4
	CMP R3, #5
	BEQ THREE_5
	B CONT3_5
THREE_5
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_5

CONT3_5
	CMP R3, #6
	BEQ THREE_6
	B CONT3_6
THREE_6
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_6
	
CONT3_6
	CMP R3, #7
	BEQ THREE_7
	B CONT3_7
THREE_7
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_7
	
CONT3_7
	CMP R3, #8
	BEQ THREE_8
	B CONT3_8
THREE_8
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_8

CONT3_8
	CMP R3, #9
	BEQ THREE_9
	B CONT3_9
THREE_9
    MOV R6, #151
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_9	
	
CONT3_9
	
	POP {R0-R12, PC}
    ENDFUNC



MOVE_PAD_RIGHT FUNCTION
    PUSH {R0-R8, r10, LR}
	
	;check boundaries
	LDR R0, =PAD_X
	LDRH R6, [R0]
	MOV R12, #230
	CMP R6, R12
	BGE FUNCEXIT22
	;coordinates of upper left corner
	;R6=x1 120
	;R7=y1 225
	;R8=color
	;COVER THE LEFT PART WITH BLACK
	MOV R7, #225
	MOV R0, R6
	SUB R0, R0, #5
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #35
	MOV R4, R7
	ADD R4, R4, #10
	LDR R10, =BLACK 
	BL DRAW_RECTANGLE_FILLED
	
	ADD R6, R6, #40
	LDR R0, =PAD_X
	STRH R6, [R0]
	LDR R8, =YELLOW
	BL DRAW_PAD

FUNCEXIT22

	POP {R0-R8, r10, PC}
	ENDFUNC
	
UPDATE_BALL_POSITION FUNCTION
	PUSH {R0-R12, LR}
	
	;COVER WITH A BLACK BALL
	LDR R0, =BALL_X
	LDRH R6,[R0]
	LDR R0, =BALL_Y
	LDRH R7,[R0]
	B KAKA1
	LTORG
KAKA1
	LDR R10, =BLACK
	BL DRAW_BALL
	
	
	;R6=X	R7=Y
	;R8=SPEEDX	R9=SPEEDY
	;R4=SPEED_XD	R5=SPEED_YD
	LDR R0, =SPEED_X
	LDRH R8,[R0]
	LDR R0, =SPEED_Y
	LDRH R9,[R0]
	
	LDR R0, =SPEED_XD
	LDRH R4,[R0]
	LDR R0, =SPEED_YD
	LDRH R5,[R0]
	B KAKAK
	LTORG
KAKAK
	CMP R4, #0
	BEQ ADD_X
	B MINUS_X
	
ADD_X

	MOV R12, #305
	CMP R6, R12
	BGE BOUNCE_R
	ADD R6, R6, R8
	B EXITT

BOUNCE_R
	MOV R4, #1
	SUB R6, R6, R8
	B EXITT
MINUS_X
	CMP R6, #15
	BLE BOUNCE_L
	SUB R6, R6, R8
	B EXITT

BOUNCE_L

	MOV R4, #0
	ADD R6, R6, R8
	B EXITT
	

	
EXITT
	LDR R0, =BALL_X
	STRH R6, [R0]
	LDR R0, =SPEED_XD
	STRH R4, [R0]
	B KAKAA
	LTORG
KAKAA
	
	
	
	CMP R5, #0
	BEQ ADD_Y
	B MINUS_Y
		

	
	
     	
		
ADD_Y
	LDR R0, =GREEN_LINE
	ADD R0, R0, #10
	CMP R7, R0
	BLE BOUNCE_D
	SUB R7, R7, R9
	B EXIT2
	
BOUNCE_D

	MOV R5,#1
	ADD R7, R7, R9
	B EXIT2
	
MINUS_Y

	CMP R7, #206
	BGT BOUNCE_U
	ADD R7, R7, R9
	B EXIT2
	
BOUNCE_U

	MOV R5, #0
	SUB R7, R7, R9
	B EXIT2

 


EXIT2
	LDR R10, =WHITE	
	LDR R0, =BALL_Y
	STRH R7, [R0]
	LDR R0, =SPEED_YD
    STRH R5, [R0]
	B KAKAQ
	LTORG
KAKAQ
	BL DRAW_BALL
	
EXIT_UPDATE_FINAL
	POP {R0-R12, PC}
    ENDFUNC





;**************************************************************************************************************


	;SELECT GAME 2
SELECT_2  FUNCTION
    PUSH {R0-R8, r10, LR}
	
	MOV R0, #85
	MOV R1, #160
	MOV R3, #213
	MOV R4, #200
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #100
	MOV R7, #170
	LDR R8, =RED
	BL DRAW_G
	
	MOV R6, #119
	MOV R7, #170
	LDR R8, =RED
	BL DRAW_A
	
	MOV R6, #136
	MOV R7, #170
	LDR R8, =RED
	BL DRAW_M

	MOV R6, #159
	MOV R7, #170
	LDR R8, =RED
	BL DRAW_E
	
	MOV R6, #190
	MOV R7, #170
	LDR R8, =RED
	BL DRAW_2

	POP {R0-R8, r10, PC}
    ENDFUNC
	
	;GAME 2
DRAW_GAME_2  FUNCTION
    PUSH {R0-R8, r10, LR}
	
	MOV R0, #85
	MOV R1, #160
	MOV R3, #213
	MOV R4, #200
	LDR R10, =ZETY
	BL DRAW_RECTANGLE_FILLED
	
	MOV R6, #100
	MOV R7, #170
	LDR R8, =BLACK
	BL DRAW_G
	
	MOV R6, #119
	MOV R7, #170
	LDR R8, =BLACK
	BL DRAW_A
	
	MOV R6, #136
	MOV R7, #170
	LDR R8, =BLACK
	BL DRAW_M

	MOV R6, #159
	MOV R7, #170
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #190
	MOV R7, #170
	LDR R8, =BLACK
	BL DRAW_2

	POP {R0-R8, r10, PC}
    ENDFUNC
	
;GAME 1
SELECT_1  FUNCTION
    PUSH {R0-R8, r10, LR}
	
	MOV R0, #85
	MOV R1, #100
	MOV R3, #213
	MOV R4, #140
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED

	MOV R6, #100
	MOV R7, #110
	LDR R8, =RED
	BL DRAW_G
	
	MOV R6, #119
	MOV R7, #110
	LDR R8, =RED
	BL DRAW_A
	
	MOV R6, #136
	MOV R7, #110
	LDR R8, =RED
	BL DRAW_M

	MOV R6, #159
	MOV R7, #110
	LDR R8, =RED
	BL DRAW_E
	
	MOV R6, #190
	MOV R7, #110
	LDR R8, =RED
	BL DRAW_1
	
	POP {R0-R8, r10, PC}
    ENDFUNC
	
;SELECT GAME 1
DRAW_GAME_1  FUNCTION
    PUSH {R0-R8, r10, LR}
	
	MOV R0, #85
	MOV R1, #100
	MOV R3, #213
	MOV R4, #140
	LDR R10, =ZETY
	BL DRAW_RECTANGLE_FILLED

	MOV R6, #100
	MOV R7, #110
	LDR R8, =BLACK
	BL DRAW_G
	
	MOV R6, #119
	MOV R7, #110
	LDR R8, =BLACK
	BL DRAW_A
	
	MOV R6, #136
	MOV R7, #110
	LDR R8, =BLACK
	BL DRAW_M

	MOV R6, #159
	MOV R7, #110
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #190
	MOV R7, #110
	LDR R8, =BLACK
	BL DRAW_1
	
	POP {R0-R8, r10, PC}
    ENDFUNC


GAMEOVERC4 FUNCTION
	PUSH {R0-R12, LR}
	LDR R10,=BLACK
	BL DRAW_BLACKCOIN_WITH_ARROW
	MOV R0, #0
	MOV R1, #0
	MOV R3, #320
	MOV R4, #34
	
	BL DRAW_RECTANGLE_FILLED
	MOV R0, #50
	MOV R1, #50
	MOV R3, #250
	MOV R4, #150
	LDR R10, =GRAY
	BL DRAW_RECTANGLE_FILLED
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	B OO
	LTORG
OO
	CMP R11, #0xF800
	BNE DRAWRED_C4
	B NOTRED_C4
	
DRAWRED_C4
	MOV R6, #75
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_R
	
	MOV R6, #95
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_E
	
	MOV R6, #120
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_D
	MOV R6, #150
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_W
	
	MOV R6, #175
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_O
	
	MOV R6, #195
	MOV R7, #60
	LDR R8, =RED
	BL DRAW_N
	B EXITDRAW_C4
NOTRED_C4
	MOV R6, #75
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_Y
	
	MOV R6, #100
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_L
	
	MOV R6, #120
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_W
	MOV R6, #155
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_W
	
	MOV R6, #185
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_O
	
	MOV R6, #205
	MOV R7, #60
	LDR R8, =YELLOW
	BL DRAW_N
EXITDRAW_C4
	
	MOV R6, #75
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_C
	
	MOV R6, #90
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_N
	
	MOV R6, #115
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #90
	LDR R8, =BLUE
	BL DRAW_0
	
	
	MOV R6, #75
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #90
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_X
	
	MOV R6, #115
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_T
	MOV R6, #160
	MOV R7, #120
	LDR R8, =BLUE
	BL DRAW_0
	;BUZZER POWER UP
	LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	ORR R1, R1, R2
	STRH R1, [R0]
	
	
HAMADALOOL


;EXIT
	LDR R0, =GPIOA_IDR_OFFSET
	B SKIP1211
	LTORG
SKIP1211
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#8
	AND R1,R1,R2
	CMP R1,#0	
	BEQ SKIP141
	B WELCOMEPAGE
;CONTINUE
	B SKIP141
	LTORG
SKIP141
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#9
	AND R1,R1,R2
	CMP R1,#0
	BEQ HAMADALOOL
	B CONNECT4
	
	POP {R0 - R12, PC}
	ENDFUNC
	
CHECK_TIE FUNCTION
	PUSH {R0 - R12, LR}
	MOV R2, #42 ;COUNTER
	LDR R0,=ARRAY1
TIE_LOOP
	LDRB R1, [R0]
	CMP R1, #0
	BEQ SKIP999
	B CONTTT
SKIP999
	POP{R0-R12, PC}
	ENDFUNC
CONTTT
	ADD R0,R0 ,#1
	SUB R2, R2, #1
	CMP R2, #0
	BEQ TIE_GAME
	B TIE_LOOP
TIE_GAME
	LDR R10,=BLACK
	BL DRAW_BLACKCOIN_WITH_ARROW
	MOV R0, #0
	MOV R1, #0
	MOV R3, #320
	MOV R4, #34
	BL DRAW_RECTANGLE_FILLED
	MOV R0, #50
	MOV R1, #50
	MOV R3, #250
	MOV R4, #150
	LDR R10, =CYAN
	BL DRAW_RECTANGLE_FILLED
	MOV R6, #75
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #98
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_I
	
	MOV R6, #117
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_E
	MOV R6, #155
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_G
	
	MOV R6, #175
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_A
	
	MOV R6, #193
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_M
	
	MOV R6, #215
	MOV R7, #60
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #75
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_C
	
	MOV R6, #90
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_N
	
	MOV R6, #115
	MOV R7, #90
	LDR R8, =BLACK
	BL DRAW_T
	
	MOV R6, #160
	MOV R7, #90
	LDR R8, =BLUE
	BL DRAW_0
	
	
	MOV R6, #75
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_E
	
	MOV R6, #90
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_X
	
	MOV R6, #115
	MOV R7, #120
	LDR R8, =BLACK
	BL DRAW_T
	MOV R6, #160
	MOV R7, #120
	LDR R8, =BLUE
	BL DRAW_0
HAMADALOOL8
;EXIT
	LDR R0, =GPIOA_IDR_OFFSET
	B SKIP1212
	LTORG
SKIP1212
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#8
	AND R1,R1,R2
	CMP R1,#0	
	BEQ SKIP142
	B WELCOMEPAGE
;CONTINUE
	B SKIP142
	LTORG
SKIP142
	LDR R1,[R0]
	MOV R2,#1
	LSL R2,#9
	AND R1,R1,R2
	CMP R1,#0
	BEQ HAMADALOOL8
	B CONNECT4
TIE_EXIT
	POP {R0 - R12, PC}
	ENDFUNC
CHECK_WON FUNCTION 
	PUSH {R0 - R12, LR}
	BL CHECK_HORIZONTAL
	BL CHECK_VERTICAL
	BL CHECK_DIAGONAL1
	BL CHECK_DIAGONAL2
	POP {R0 - R12, PC}
	ENDFUNC

CHECK_DIAGONAL2 FUNCTION  ;BOTTOM-left to TOP-right
	PUSH {R0 - R12, LR}
	; R6 = PLAYER 1 IF RED 2 IF YELLOW
	LDR R0, =LAST_COLOR_DRAWN
	B SKIP89D2
	LTORG
SKIP89D2
	LDRH R1, [R0]
	CMP R1, #0xF800
	BNE PLAYER_IS_REDD2
	MOV R6, #2
	B PLAYER_IS_YELLOWD2
PLAYER_IS_REDD2
	MOV R6, #1
PLAYER_IS_YELLOWD2
;WINNING HORIZONTAL
	LDR R0, =ARRAY1
	B SKIP100D2
	LTORG
SKIP100D2
	;OFFSET OF ARRAY STORED IN R2
	MOV R9, #3 ;COUNTER FOR LOOP1_ROW FROM 3 TO 5 LOOPS
	
LOOP1_ROWD2
	MOV R10, #0 ;COUNTER FOR LOOP1_COLUMN 4 LOOPS
LOOP1_COLUMND2
	MOV R2, R9
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	;R2 = R9 + R10*6
	LDR R0, =ARRAY1
	ADD R0, R0, R2
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSETD2
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROWD2
	B NEXT_COLUMND2
NEXT_ROWD2
	CMP R9, #5
	BEQ LOOPS_FINISHEDD2
	ADD R9, R9, #1
	B LOOP1_ROWD2
NEXT_COLUMND2
	ADD R10, R10, #1
	B LOOP1_COLUMND2
	
INCOFFSETD2
	ADD R0, R0, #5
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET2D2
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW2D2
	B NEXT_COLUMN2D2
NEXT_ROW2D2
	CMP R9, #5
	BEQ LOOPS_FINISHEDD2
	ADD R9, R9, #1
	B LOOP1_ROWD2
NEXT_COLUMN2D2
	ADD R10, R10, #1
	B LOOP1_COLUMND2
	
INCOFFSET2D2
	ADD R0, R0, #5
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET3D2
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW3D2
	B NEXT_COLUMN3D2
NEXT_ROW3D2
	CMP R9, #5
	BEQ LOOPS_FINISHEDD2
	ADD R9, R9, #1
	B LOOP1_ROWD2
NEXT_COLUMN3D2
	ADD R10, R10, #1
	B LOOP1_COLUMND2
	
INCOFFSET3D2
	ADD R0, R0, #5
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET4D2
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW4D2
	B NEXT_COLUMN4D2
NEXT_ROW4D2
	CMP R9, #5
	BEQ LOOPS_FINISHEDD2
	ADD R9, R9, #1
	B LOOP1_ROWD2
NEXT_COLUMN4D2
	ADD R10, R10, #1
	B LOOP1_COLUMND2
	
INCOFFSET4D2
	BL GAMEOVERC4
	
	
LOOPS_FINISHEDD2

	POP {R0 - R12, PC}
	ENDFUNC

CHECK_DIAGONAL1 FUNCTION ;top-left to bottom-right
	PUSH {R0 - R12, LR}
	; R6 = PLAYER 1 IF RED 2 IF YELLOW
	LDR R0, =LAST_COLOR_DRAWN
	B SKIP89D1
	LTORG
SKIP89D1
	LDRH R1, [R0]
	CMP R1, #0xF800
	BNE PLAYER_IS_REDD1
	MOV R6, #2
	B PLAYER_IS_YELLOWD1
PLAYER_IS_REDD1
	MOV R6, #1
PLAYER_IS_YELLOWD1
;WINNING HORIZONTAL
	LDR R0, =ARRAY1
	B SKIP100D1
	LTORG
SKIP100D1
	;OFFSET OF ARRAY STORED IN R2
	MOV R9, #0 ;COUNTER FOR LOOP1_ROW 3 LOOPS
	
LOOP1_ROWD1
	MOV R10, #0 ;COUNTER FOR LOOP1_COLUMN 4 LOOPS
LOOP1_COLUMND1	
	MOV R2, R9
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	;R2 = R9 + R10*6
	LDR R0, =ARRAY1
	ADD R0, R0, R2
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSETD1
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROWD1
	B NEXT_COLUMND1
NEXT_ROWD1
	CMP R9, #2
	BEQ LOOPS_FINISHEDD1
	ADD R9, R9, #1
	B LOOP1_ROWD1
NEXT_COLUMND1
	ADD R10, R10, #1
	B LOOP1_COLUMND1
	
INCOFFSETD1
	ADD R0, R0, #7
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET2D1
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW2D1
	B NEXT_COLUMN2D1
NEXT_ROW2D1
	CMP R9, #2
	BEQ LOOPS_FINISHEDD1
	ADD R9, R9, #1
	B LOOP1_ROWD1
NEXT_COLUMN2D1
	ADD R10, R10, #1
	B LOOP1_COLUMND1
	
INCOFFSET2D1
	ADD R0, R0, #7
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET3D1
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW3D1
	B NEXT_COLUMN3D1
NEXT_ROW3D1
	CMP R9, #2
	BEQ LOOPS_FINISHEDD1
	ADD R9, R9, #1
	B LOOP1_ROWD1
NEXT_COLUMN3D1
	ADD R10, R10, #1
	B LOOP1_COLUMND1
	
INCOFFSET3D1
	ADD R0, R0, #7
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET4D1
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW4D1
	B NEXT_COLUMN4D1
NEXT_ROW4D1
	CMP R9, #2
	BEQ LOOPS_FINISHEDD1
	ADD R9, R9, #1
	B LOOP1_ROWD1
NEXT_COLUMN4D1
	ADD R10, R10, #1
	B LOOP1_COLUMND1
	
INCOFFSET4D1
	BL GAMEOVERC4
	
	
LOOPS_FINISHEDD1

	POP {R0 - R12, PC}
	ENDFUNC
	
	
CHECK_VERTICAL FUNCTION
	PUSH {R0 - R12, LR}
		; R6 = PLAYER 1 IF RED 2 IF YELLOW
	LDR R0, =LAST_COLOR_DRAWN
	B SKIP89V
	LTORG
SKIP89V
	LDRH R1, [R0]
	CMP R1, #0xF800
	BNE PLAYER_IS_REDV
	MOV R6, #2
	B PLAYER_IS_YELLOWV
PLAYER_IS_REDV
	MOV R6, #1
PLAYER_IS_YELLOWV
	;WINNING HORIZONTAL
	LDR R0, =ARRAY1
	B SKIP100V
	LTORG
SKIP100V
	;OFFSET OF ARRAY STORED IN R2
	MOV R9, #0 ;COUNTER FOR LOOP1_COL 7 LOOPS
	
LOOP1_COLUMNV
	MOV R10, #0 ;COUNTER FOR LOOP1_ROW 3 LOOPS
LOOP1_ROWV	
	MOV R2, R10
	ADD R2, R2, R9 
	ADD R2, R2, R9 
	ADD R2, R2, R9 
	ADD R2, R2, R9 
	ADD R2, R2, R9 
	ADD R2, R2, R9 
	;R2 = R10 + R9*6
	LDR R0, =ARRAY1
	ADD R0, R0, R2
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSETV
	;NO COIN FOR PLAYER
	CMP R10, #2
	BEQ NEXT_COLUMNV
	B NEXT_ROWV
NEXT_COLUMNV
	CMP R9, #6
	BEQ LOOPS_FINISHEDV
	ADD R9, R9, #1
	B LOOP1_COLUMNV
NEXT_ROWV
	ADD R10, R10, #1
	B LOOP1_ROWV
	
INCOFFSETV
	ADD R0, R0, #1
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET2V
	;NO COIN FOR PLAYER
	CMP R10, #2
	BEQ NEXT_COLUMN2V
	B NEXT_ROW2V
NEXT_COLUMN2V
	CMP R9, #6
	BEQ LOOPS_FINISHEDV
	ADD R9, R9, #1
	B LOOP1_COLUMNV
NEXT_ROW2V
	ADD R10, R10, #1
	B LOOP1_ROWV
	
INCOFFSET2V
	ADD R0, R0, #1
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET3V
	;NO COIN FOR PLAYER
	CMP R10, #2
	BEQ NEXT_COLUMN3V
	B NEXT_ROW3V
NEXT_COLUMN3V
	CMP R9, #6
	BEQ LOOPS_FINISHEDV
	ADD R9, R9, #1
	B LOOP1_COLUMNV
NEXT_ROW3V
	ADD R10, R10, #1
	B LOOP1_ROWV
	
INCOFFSET3V
	ADD R0, R0, #1
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET4V
	;NO COIN FOR PLAYER
	CMP R10, #2
	BEQ NEXT_COLUMN4V
	B NEXT_ROW4V
NEXT_COLUMN4V
	CMP R9, #6
	BEQ LOOPS_FINISHEDV
	ADD R9, R9, #1
	B LOOP1_COLUMNV
NEXT_ROW4V
	ADD R10, R10, #1
	B LOOP1_ROWV
	
INCOFFSET4V
	BL GAMEOVERC4
	
	
LOOPS_FINISHEDV
	POP {R0 - R12, PC}
	ENDFUNC

CHECK_HORIZONTAL FUNCTION 
	PUSH {R0 - R12, LR}
	; R6 = PLAYER 1 IF RED 2 IF YELLOW
	LDR R0, =LAST_COLOR_DRAWN
	B SKIP89
	LTORG
SKIP89
	LDRH R1, [R0]
	CMP R1, #0xF800
	BNE PLAYER_IS_RED
	MOV R6, #2
	B PLAYER_IS_YELLOW
PLAYER_IS_RED
	MOV R6, #1
PLAYER_IS_YELLOW
	;WINNING HORIZONTAL
	LDR R0, =ARRAY1
	B SKIP100
	LTORG
SKIP100
	;OFFSET OF ARRAY STORED IN R2
	MOV R9, #0 ;COUNTER FOR LOOP1_ROW 6 LOOPS
	
LOOP1_ROW
	MOV R10, #0 ;COUNTER FOR LOOP1_COLUMN 4 LOOPS
LOOP1_COLUMN	
	MOV R2, R9
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	ADD R2, R2, R10 
	;R2 = R9 + R10*6
	LDR R0, =ARRAY1
	B NONO
	LTORG
NONO
	ADD R0, R0, R2
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW
	B NEXT_COLUMN
NEXT_ROW
	CMP R9, #5
	BEQ LOOPS_FINISHED
	ADD R9, R9, #1
	B LOOP1_ROW
NEXT_COLUMN
	ADD R10, R10, #1
	B LOOP1_COLUMN
	
INCOFFSET
	ADD R0, R0, #6
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET2
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW2
	B NEXT_COLUMN2
NEXT_ROW2
	CMP R9, #5
	BEQ LOOPS_FINISHED
	ADD R9, R9, #1
	B LOOP1_ROW
NEXT_COLUMN2
	ADD R10, R10, #1
	B LOOP1_COLUMN
	
INCOFFSET2
	ADD R0, R0, #6
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET3
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW3
	B NEXT_COLUMN3
NEXT_ROW3
	CMP R9, #5
	BEQ LOOPS_FINISHED
	ADD R9, R9, #1
	B LOOP1_ROW
NEXT_COLUMN3
	ADD R10, R10, #1
	B LOOP1_COLUMN
	
INCOFFSET3
	ADD R0, R0, #6
	MOV R1, #0
	LDRB R1, [R0]
	CMP R1, R6
	BEQ INCOFFSET4
	;NO COIN FOR PLAYER
	CMP R10, #3
	BEQ NEXT_ROW4
	B NEXT_COLUMN4
NEXT_ROW4
	CMP R9, #5
	BEQ LOOPS_FINISHED
	ADD R9, R9, #1
	B LOOP1_ROW
NEXT_COLUMN4
	ADD R10, R10, #1
	B LOOP1_COLUMN
	
INCOFFSET4
	BL GAMEOVERC4

	
	
LOOPS_FINISHED
	POP {R0 - R12, PC}
	ENDFUNC
	
INSERT FUNCTION
	;TRSM NFS EL LON F EL CLOMN EL W2FEN 3LEH W T INSERT F EL ARRAY BTA3O 
	;W TSWITCH EL COLOR 
	PUSH {R0 - R12, LR}
	MOV R0,#0X3A
	LDR R1, =PlayersCoinX 
	LDRH R2, [R1]
	CMP R2, R0
	BEQ DUMMY_LABEL1 ;B INSERT_EXIT IN INSERT_IN_ARRAY1

	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL2 ;B INSERT_EXIT IN INSERT_IN_ARRAY2
	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL3 ;B INSERT_EXIT IN INSERT_IN_ARRAY3
	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL4 ;B INSERT_EXIT IN INSERT_IN_ARRAY4
	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL5 ;B INSERT_EXIT IN INSERT_IN_ARRAY5
	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL6 ;B INSERT_EXIT IN INSERT_IN_ARRAY6
	ADD R0, R0, #34
	CMP R2, R0
	BEQ DUMMY_LABEL7 ;B INSERT_EXIT IN INSERT_IN_ARRAY7



DUMMY_LABEL1
	LDR R0, =ARRAY1
	BL INSERT_IN_ARRAY
	B EXITFNC
DUMMY_LABEL2
	LDR R0, =ARRAY2
	BL INSERT_IN_ARRAY
	B EXITFNC
DUMMY_LABEL3
	LDR R0, =ARRAY3
	BL INSERT_IN_ARRAY
	B EXITFNC
DUMMY_LABEL4
	LDR R0, =ARRAY4
	BL INSERT_IN_ARRAY
	B EXITFNC
DUMMY_LABEL5
	LDR R0, =ARRAY5
	BL INSERT_IN_ARRAY
	B EXITFNC	
DUMMY_LABEL6
	LDR R0, =ARRAY6
	BL INSERT_IN_ARRAY
	B EXITFNC
DUMMY_LABEL7
	LDR R0, =ARRAY7
	BL INSERT_IN_ARRAY
	B EXITFNC	
EXITFNC
	POP {R0 - R12, PC}
	ENDFUNC

INSERT_IN_ARRAY FUNCTION 
	PUSH {R0 - R12, LR}
	;OFFSET OF ARRAY IN R0
	MOV R6, #6 ;COUNTER
	LDR R3, =PlayersCoinX
	LDRH R4, [R3]
	MOV R2, #0
LOOP99
	LDRB R1, [R0]
	CMP R1, R2
	BNE LOOP99OUT
	CMP R1, R2
	SUBEQ R6, R6, #1
	CMP R1, R2
	ADDEQ R0, R0, #1
	CMP R6, R2
	BNE LOOP99
LOOP99OUT
	SUB R0, R0, #1
	CMP R6,#6
	BEQ EXITTkHALES
	CMP R6,#5
	BEQ L1
	CMP R6,#4
	BEQ L2
	CMP R6,#3
	BEQ L3
	CMP R6,#2
	BEQ L4
	CMP R6,#1
	BEQ L5
	CMP R6,#0
	BEQ L6
	B EXITTkHALES
L1
	BL DRAW_ROW1_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L1
	B NOTRED_L1
DRAWRED_L1
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L1
NOTRED_L1
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L1
	B EXITT131
L2
	BL DRAW_ROW2_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L2
	B NOTRED_L2
DRAWRED_L2
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L2
NOTRED_L2
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L2
	B EXITT131
L3
	BL DRAW_ROW3_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L3
	B NOTRED_L3
DRAWRED_L3
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L3
NOTRED_L3
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L3
	B EXITT131
L4
	BL DRAW_ROW4_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L4
	B NOTRED_L4
DRAWRED_L4
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L4
NOTRED_L4
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L4
	B EXITT131
L5
	BL DRAW_ROW5_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L5
	B NOTRED_L5
DRAWRED_L5
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L5
NOTRED_L5
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L5
	B EXITT131
L6
	BL DRAW_ROW6_COIN
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800 ;CMP M3 RED
	BEQ DRAWRED_L6
	B NOTRED_L6
DRAWRED_L6
	MOV R4, #1
	STRB R4, [R0] ; STR 1
	B EXIT_L6
NOTRED_L6
	MOV R5, #2
	STRB R5, [R0] ;STR 2
EXIT_L6
	B EXITT131
EXITT131
	BL SWITCH_COLOR
EXITTkHALES
	POP {R0 - R12, PC}
	ENDFUNC
	
	
	
SWITCH_COLOR FUNCTION
	PUSH {R0 - R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800
	BNE DRAWRED2
	B NOTRED2
DRAWRED2
	BL DrawRedPlayersCoin
	BL RED_TURN
	LDR R10, =YELLOW
	BL DRAW_ARROW
	B EXITDRAW2
NOTRED2
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
	LDR R10, =YELLOW
	BL DRAW_ARROW
EXITDRAW2
	POP {R0 - R12, PC}
	ENDFUNC

INTIALIZE_VARIABLES FUNCTION
	PUSH {R0 - R12, LR}
	; BUZZER SHUT DOWN
	LDR R0, =GPIOB_ODR_OFFSET
	LDR R1, [R0]
	MOV R2, #1
	LSL R2, #12
	MVN R2,R2
	AND R1, R1, R2
	STRH R1, [R0]
	LDR R0, =PAD_X
	MOV R1, #0x78
	STRH R1, [R0]
	
	LDR R0, =BRICKS_X
	MOV R1, #0x5
	STRH R1, [R0]	
	
	LDR R0, =BRICKS_LAST
	MOV R1, #0x13D
	STRH R1, [R0]

	LDR R0, =BRICKS_Y
	MOV R1, #0x31
	STRH R1, [R0]	
	
	LDR R0, =BRICKS_LY
	MOV R1, #0x82
	STRH R1, [R0]

	LDR R0, =PURPLE_X
	MOV R1, #0xBB
	STRH R1, [R0]
	
	;ball
	
	LDR R0, =ITERATION
	MOV R1, #0x0
	STRH R1, [R0]
	
	LDR R0, =BALL_X
	MOV R1, #0x9A
	STRH R1, [R0]
	
	LDR R0, =BALL_Y
	MOV R1, #0xD2
	STRH R1, [R0]	
	
	LDR R0, =SPEED_X
	MOV R1, #0x14
	STRH R1, [R0]

	LDR R0, =SPEED_Y
	MOV R1, #0x14
	STRH R1, [R0]	
	
    LDR R0, =SPEED_XD
	MOV R1, #0x0
	STRH R1, [R0]
	
    LDR R0, =SCORE
	MOV R1, #0x0
	STRH R1, [R0]
	
    LDR R0, =GREATEST_LY
	MOV R1, #0x0
	STRH R1, [R0]

	LDR R0, =SPEED_YD
	MOV R1, #0x0
	STRH R1, [R0]	
	
	LDR R0, =LAST_YS
	MOV R1, #0x00000000
	ADD R1, R1, #0x00050000
	ADD R1, R1, #0x00000081
	STR R1, [R0]
	
    LDR R0, =LAST_YS
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, R1, #0x001A0000
	ADD R1, R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x002F0000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00440000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00590000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x006E0000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00830000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00980000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00AD0000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00C20000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00D70000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00EC0000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00010000
	ADD R1, #0x01000000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x00160000
	ADD R1, #0x01000000
	ADD R1, #0x00000081
	STR R1, [R0]
	ADD R0, R0, #4
	MOV R1, #0x00000000
	ADD R1, #0x002B0000
	ADD R1, #0x01000000
	ADD R1, #0x00000081
	STR R1, [R0]
	
	B EXITTTT1
	LTORG
EXITTTT1
	
	
	
	LDR R0, =PlayersCoinX 
	MOV R1, #0X3A
	STRH R1, [R0]
	LDR R2, =PlayersCoinY 
	MOV R3, #0X2D
	STRH R3, [R2]
	LDR R4, =LAST_COLOR_DRAWN 
	MOV R5, #0xF800
	STRD R5, [R4]
	MOV R0,#0X0
	MOV R6, #42
	LDR R1, =ARRAY1
LOOP8
	STRB R0, [R1]
	ADD R1, R1, #0X1
	SUB R6, R6, #0X1
	CMP R6, #0X0
	BNE LOOP8
	
	
	LDR R0, =SELECTED_GAME
	MOV R1, #0
	STR R1, [R0]
	
	POP {R0 - R12, PC}
	
	
	ENDFUNC
	
RED_TURN FUNCTION
	PUSH {R0 - R12, LR}
	BL HIDE_COLOR_TURN
	;R
	
	MOV R6, #10
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_R
	
	;E   GAP=8PIXELS
	
	MOV R6, #28
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_E
		
		
	;D GAP=8 PIXELS
	MOV R6, #52
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_D
	
	;T GAP=8 PIXELS
	MOV R6, #80
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_T
	
	;U
	
	MOV R6, #98
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_U
	
	;R   GAP=8PIXELS
	
	MOV R6, #116
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_R
		
		
	;N GAP=8 PIXELS
	MOV R6, #133
	MOV R7, #5
	LDR R8, =RED
	BL DRAW_N
	
	
	POP {R0 - R12, PC}
	ENDFUNC
	
YELLOW_TURN FUNCTION
	
	PUSH {R0-R12, LR}
	BL HIDE_COLOR_TURN
	;Y
	
	MOV R6, #10
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_Y
	
	;L  GAP=8PIXELS
	
	MOV R6, #33
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_L
		
		
	;W GAP=8 PIXELS
	MOV R6, #52
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_W
	
	;T GAP=8 PIXELS
	MOV R6, #80
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_T
	
	;U
	
	MOV R6, #98
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_U
	
	;R   GAP=8PIXELS
	
	MOV R6, #116
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_R
		
		
	;N GAP=8 PIXELS
	MOV R6, #133
	MOV R7, #5
	LDR R8, =YELLOW
	BL DRAW_N
	POP {R0 - R12, PC}
	ENDFUNC
		
MOVE_RIGHT FUNCTION
	PUSH {R0-R11, LR}
	
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	CMP R1, #262
	BGE EXITDRAW
	BL DRAW_BLACKCOIN_WITH_ARROW
	MOV R5, R1
	ADD R5, R5, #34
	STRH R5, [R0]
	B LOLO4
	LTORG 
LOLO4
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800
	BEQ DRAWRED
	B NOTRED
DRAWRED
	BL DrawRedPlayersCoin
	LDR R10, =YELLOW
	BL DRAW_ARROW
	B EXITDRAW
NOTRED
	BL DrawYellowPlayersCoin
	LDR R10, =YELLOW
	BL DRAW_ARROW
EXITDRAW

	POP {R0-R11 ,PC}
	
		ENDFUNC
		
MOVE_LEFT FUNCTION
	PUSH {R0-R11, LR}
	
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	CMP R1, #58
	BLE EXITDRAW1
	BL DRAW_BLACKCOIN_WITH_ARROW
	MOV R5, R1
	SUB R5, R5, #34
	STRH R5, [R0]
	B LOLO5
	LTORG 
LOLO5
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	CMP R11, #0xF800
	BEQ DRAWRED1
	B NOTRED1
DRAWRED1
	BL DrawRedPlayersCoin
	LDR R10, =YELLOW
	BL DRAW_ARROW
	B EXITDRAW1
NOTRED1
	BL DrawYellowPlayersCoin
	LDR R10, =YELLOW
	BL DRAW_ARROW
EXITDRAW1

	POP {R0-R11 ,PC}
	
		ENDFUNC
		
		
		
DRAW_ROW1_COIN FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	LDR R2, =PlayersCoinY
	MOV R3, #0X56
	CMP R11, #0xF800
	BEQ DRAWRED_R1
	B NOTRED_R1
DRAWRED_R1
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R1
NOTRED_R1
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R1
	POP {R0-R12, PC}
		ENDFUNC
		
	
		
		
DRAW_ROW2_COIN  FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	BL DRAW_ROW1_COIN
	BL delay_10_milli_second
	LDR R2, =PlayersCoinY
	MOV R3, #0X56
	STRH R3, [R2]
	BL DRAW_BLACKCOIN_WITH_ARROW
	LDR R2, =PlayersCoinY
	MOV R3, #0X70
	CMP R11, #0xF800
	BEQ DRAWRED_R2
	B NOTRED_R2
DRAWRED_R2
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R2
NOTRED_R2
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R2
	POP {R0-R12, PC}
		ENDFUNC
		
		
DRAW_ROW3_COIN  FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	BL DRAW_ROW2_COIN
	BL delay_10_milli_second
	LDR R2, =PlayersCoinY
	MOV R3, #0X70
	STRH R3, [R2]
	BL DRAW_BLACKCOIN_WITH_ARROW
	LDR R2, =PlayersCoinY
	MOV R3, #0X8A
	CMP R11, #0xF800
	BEQ DRAWRED_R3
	B NOTRED_R3
DRAWRED_R3
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R3
NOTRED_R3
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R3
	POP {R0-R12, PC}
		ENDFUNC		
		
DRAW_ROW4_COIN  FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	BL DRAW_ROW3_COIN
	BL delay_10_milli_second
	LDR R2, =PlayersCoinY
	MOV R3, #0X8A
	STRH R3, [R2]
	BL DRAW_BLACKCOIN_WITH_ARROW
	LDR R2, =PlayersCoinY
	MOV R3, #0XA4
	CMP R11, #0xF800
	BEQ DRAWRED_R4
	B NOTRED_R4
DRAWRED_R4
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R4
NOTRED_R4
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R4
	POP {R0-R12, PC}
		ENDFUNC
		
DRAW_ROW5_COIN  FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	BL DRAW_ROW4_COIN
	BL delay_10_milli_second
	LDR R2, =PlayersCoinY
	MOV R3, #0XA4
	STRH R3, [R2]
	BL DRAW_BLACKCOIN_WITH_ARROW
	LDR R2, =PlayersCoinY
	MOV R3, #0XBE
	CMP R11, #0xF800
	BEQ DRAWRED_R5
	B NOTRED_R5
DRAWRED_R5
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R5
NOTRED_R5
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R5
	POP {R0-R12, PC}
		ENDFUNC		

DRAW_ROW6_COIN  FUNCTION
	PUSH {R0-R12, LR}
	LDR R3, =LAST_COLOR_DRAWN
	LDRD R11, [R3]
	BL DRAW_ROW5_COIN
	BL delay_10_milli_second
	LDR R2, =PlayersCoinY
	MOV R3, #0XBE
	STRH R3, [R2]
	BL DRAW_BLACKCOIN_WITH_ARROW
	LDR R2, =PlayersCoinY
	MOV R3, #0XD8
	CMP R11, #0xF800
	BEQ DRAWRED_R6
	B NOTRED_R6
DRAWRED_R6
	
	STRH R3, [R2]
	BL DrawRedPlayersCoin
	BL RED_TURN
	B EXITDRAW_R6
NOTRED_R6
	STRH R3, [R2]
	BL DrawYellowPlayersCoin
	BL YELLOW_TURN
EXITDRAW_R6
	POP {R0-R12, PC}
		ENDFUNC

DRAW_BLACKCOIN_WITH_ARROW FUNCTION
	PUSH {R0-R9, r10, LR}
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	MOV R5, R1
	LDR R2, =PlayersCoinY
	LDRH R3, [R2]
	MOV R6, R3
	LDR R10, =BLACK
	B LOLO3
	LTORG 
LOLO3
	BL DRAW_CIRCLE_FILLED
	BL DRAW_ARROW
	POP {R0-R9, r10, PC}
		ENDFUNC

DrawYellowPlayersCoin FUNCTION
	PUSH {R0-R11, LR}
;DRAW YELLOW COIN WITH PLUS
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	MOV R5, R1
	LDR R2, =PlayersCoinY
	LDRH R3, [R2]
	MOV R6, R3
	LDR R8, =BLACK
	LDR R10, =YELLOW
	LDR R4, =LAST_COLOR_DRAWN
	STRH R10, [R4]
	B LOLO2
	LTORG 
LOLO2
	BL DRAW_CIRCLE_FILLED
	MOV R0, R5
	SUB R0, R0, #5
	MOV R1, R6
	SUB R1, R1, #2
	MOV R3, R0
	ADD R3, R3, #10
	MOV R4, R1
	ADD R4, R4, #4
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R5
	SUB R0, R0, #2
	MOV R1, R6
	SUB R1, R1, #5
	MOV R3, R0
	ADD R3, R3, #4
	MOV R4, R1
	ADD R4, R4, #10
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	LDR R2, =PlayersCoinY
	MOV R3, #0X2D
	STRH R3, [R2]

	POP {R0-R11, PC}
	ENDFUNC
DrawRedPlayersCoin FUNCTION
	;DRAW RED COIN WITH MINUS
	PUSH {R0-R11, LR}
	;DRAW COLORED COIN
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	MOV R5, R1
	LDR R2, =PlayersCoinY
	LDRH R3, [R2]
	MOV R6, R3
	LDR R10, =RED
	LDR R4, =LAST_COLOR_DRAWN
	STRH R10, [R4]
	B LOLO
	LTORG 
LOLO
	BL DRAW_CIRCLE_FILLED
	;DRAW MINUS
	MOV R0, R5
	SUB R0, R0, #4
	MOV R1, R6
	SUB R1, R1, #2
	MOV R3, R0
	ADD R3, R3, #7
	MOV R4, R1
	ADD R4, R4, #4
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	LDR R2, =PlayersCoinY
	MOV R3, #0X2D
	STRH R3, [R2]
		POP {R0-R11, PC}
		ENDFUNC
HIDE_COLOR_TURN FUNCTION
	PUSH {R0-R11, LR}
	MOV R0,#0
	MOV R1,#0
	MOV R3, #155
	MOV R4, #34
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	POP {R0-R11, PC}
	ENDFUNC
		
DRAW_ARROW FUNCTION
	;R10 ARROW COLOR
	PUSH {R0-R9, r10, LR}
	LDR R0, =PlayersCoinX
	LDRH R1, [R0]
	MOV R5, R1
	LDR R2, =PlayersCoinY
	LDRH R3, [R2]
	MOV R6, R3
	B LOLO1
	LTORG 
LOLO1
	MOV R0, R5
	MOV R1, #58
	MOV R3, R5
	MOV R4, #67
	
	BL DRAW_RECTANGLE_FILLED
	
	SUB R0, R0, #2
	MOV R1, #65
	BL DRAWPIXEL
	
	SUB R0, R0, #1
	MOV R1, #64
	BL DRAWPIXEL
	
	SUB R0, R0, #1
	MOV R1, #63
	BL DRAWPIXEL
	
	ADD R0, R0, #6
	MOV R1, #65
	BL DRAWPIXEL
	
	ADD R0, R0, #1
	MOV R1, #64
	BL DRAWPIXEL
	
	
	ADD R0, R0, #1
	MOV R1, #63
	BL DRAWPIXEL
	POP {R0-R9, r10, PC}
	ENDFUNC

ADDRESS_SET	FUNCTION
	;THIS FUNCTION TAKES X1, X2, Y1, Y2
	;IT ISSUES COLUMN ADDRESS SET TO SPECIFY THE START AND END COLUMNS (X1 AND X2)
	;IT ISSUES PAGE ADDRESS SET TO SPECIFY THE START AND END PAGE (Y1 AND Y2)
	;THIS FUNCTION JUST MARKS THE PLAYGROUND WHERE WE WILL ACTUALLY DRAW OUR PIXELS, MAYBE TARGETTING EACH PIXEL AS IT IS.
	;R0 = X1
	;R1 = X2
	;R3 = Y1
	;R4 = Y2

	;PUSHING ANY NEEDED REGISTERS
	PUSH {R0-R4, LR}
	

	;COLUMN ADDRESS SET | DATASHEET PAGE 110
	MOV R2, #0x2A
	BL LCD_COMMAND_WRITE

	;SEND THE FIRST PARAMETER (HIGHER 8-BITS OF THE STARTING COLUMN, AKA HIGHER 8-BITS OF X1)
	MOV R2, R0
	LSR R2, #8
	BL LCD_DATA_WRITE

	; SEND THE SECOND PARAMETER (LOWER 8-BITS OF THE STARTING COLUMN, AKA LOWER 8-BITS OF X1)
	MOV R2, R0
	BL LCD_DATA_WRITE


	;SEND THE THIRD PARAMETER (HIGHER 8-BITS OF THE ENDING COLUMN, AKA HIGHER 8-BITS OF X2)
	MOV R2, R1
	LSR R2, #8
	BL LCD_DATA_WRITE

	;SEND THE FOURTH PARAMETER (LOWER 8-BITS OF THE ENDING COLUMN, AKA LOWER 8-BITS OF X2)
	MOV R2, R1
	BL LCD_DATA_WRITE



	;PAGE ADDRESS SET | DATASHEET PAGE 110
	MOV R2, #0x2B
	BL LCD_COMMAND_WRITE

	;SEND THE FIRST PARAMETER (HIGHER 8-BITS OF THE STARTING PAGE, AKA HIGHER 8-BITS OF Y1)
	MOV R2, R3
	LSR R2, #8
	BL LCD_DATA_WRITE

	;SEND THE SECOND PARAMETER (LOWER 8-BITS OF THE STARTING PAGE, AKA LOWER 8-BITS OF Y1)
	MOV R2, R3
	BL LCD_DATA_WRITE


	;SEND THE THIRD PARAMETER (HIGHER 8-BITS OF THE ENDING PAGE, AKA HIGHER 8-BITS OF Y2)
	MOV R2, R4
	LSR R2, #8
	BL LCD_DATA_WRITE

	;SEND THE FOURTH PARAMETER (LOWER 8-BITS OF THE ENDING PAGE, AKA LOWER 8-BITS OF Y2)
	MOV R2, R4
	BL LCD_DATA_WRITE

	;MEMORY WRITE
	MOV R2, #0x2C
	BL LCD_COMMAND_WRITE


	;POPPING ALL REGISTERS I PUSHED
	POP {R0-R4, PC}
	ENDFUNC
;#####################################################################################################################################################################


;DRAW NUMBERS
;DRAW NUMBERS

DRAW_0  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #3
	MOV R1, R7
	ADD R1, R1, #4
	MOV R3, R6
	ADD R3, R3, #11
	MOV R4, R7
	ADD R4, R4, #19
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	
	
	POP {R0-R8, r10, PC}
    ENDFUNC

DRAW_1  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED	
	
	POP {R0-R8, r10, PC}
    
	ENDFUNC

DRAW_2  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #4
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #4
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #10
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #10
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #14
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #14
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #19
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

    MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #19
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	POP {R0-R8, r10, PC}
    
	ENDFUNC
	
DRAW_3
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 84
	;R7=y1 5
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#16
	MOV R4, R7
	ADD R4, R4, #3
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #13
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #16
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #10
	MOV R3, R6
	ADD R3, R3, #16
	MOV R4, R7
	ADD R4, R4, #13
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #20
	MOV R3, R6
	ADD R3, R3, #16
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}

DRAW_4
    PUSH {R0-R8, r10, LR}

    ; Draw the vertical line on the left
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #3
    MOV R4, R7
    ADD R4, R4, #12
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line in the middle
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #10
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #13
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}

DRAW_5
    PUSH {R0-R8, r10, LR}

    ; Draw the horizontal line at the top
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #3
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the left
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #3
    MOV R4, R7
    ADD R4, R4, #13
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line in the middle
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #14
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #17
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    ADD R1, R1, #18
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line at the bottom
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #20
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}

DRAW_6
    PUSH {R0-R8, r10, LR}

    ; Draw the horizontal line at the top
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #3
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the left
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #3
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line in the middle
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #14
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #17
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    ADD R1, R1, #18
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line at the bottom
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #20
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}
    
DRAW_7
    PUSH {R0-R8, r10, LR}

    ; Draw the horizontal line at the top
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #3
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}

DRAW_8
    PUSH {R0-R8, r10, LR}

    ; Draw the horizontal line at the top
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #3
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the left
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #3
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line in the middle
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #14
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #17
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line at the bottom
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #22
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #27
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}

DRAW_9
    PUSH {R0-R8, r10, LR}

    ; Draw the horizontal line at the top
    MOV R0, R6
    MOV R1, R7
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #3
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the left
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #3
    MOV R4, R7
    ADD R4, R4, #13
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the horizontal line in the middle
    MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #14
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #17
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    ; Draw the vertical line on the right
    MOV R0, R6
    ADD R0, R0, #13
    MOV R1, R7
    ADD R1, R1, #4
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #23
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
    MOV R1, R7
    ADD R1, R1, #23
    MOV R3, R6
    ADD R3, R3, #16
    MOV R4, R7
    ADD R4, R4, #27
    MOV R10, R8
    BL DRAW_RECTANGLE_FILLED

    POP {R0-R8, r10, PC}



	
	
	
	
;Draw letters

DRAW_N
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 64
	;R7=y1 5
	;R8=color
	; letter n
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R0, R0, #14
	MOV R3, R0
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R5, #10
	MOV R0, R6
	MOV R1, R7
	ADD R0, R0, #4
	BL DRAWPIXEL
	MOV R10, R8
DIAGONAL_LINE
	ADD R0, R0, #1
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #3
	SUB R5, R5, #1
	CMP R5, #0
	BGT DIAGONAL_LINE
	

	POP {R0-R8, r10, PC}
	
DRAW_M
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 64
	;R7=y1 5
	;R8=color
	; letter M
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R0, R0, #14
	MOV R3, R0
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R5, #5
	MOV R0, R6
	MOV R1, R7
	MOV R10, R8
	ADD R0, R0, #4
	BL DRAWPIXEL
DIAGONAL_LINE2
	ADD R0, R0, #1
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #3
	SUB R5, R5, #1
	CMP R5, #0
	BGT DIAGONAL_LINE2
	
	MOV R5, #5
	ADD R1, R1, #3
DIAGONAL_LINE3	
	
	ADD R0, R0, #1
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #3
	SUB R5, R5, #1
	CMP R5, #0
	BGT DIAGONAL_LINE3
	

	POP {R0-R8, r10, PC}
	
DRAW_W
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 64
	;R7=y1 5
	;R8=color
	; letter M
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R0, R0, #14
	MOV R3, R0
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R5, #5
	MOV R0, R6
	MOV R1, R7
	MOV R10, R8
	ADD R1, R1, #23
	ADD R0, R0, #4
	BL DRAWPIXEL
DIAGONAL_LINE4
	
	ADD R0, R0, #1
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #3
	SUB R5, R5, #1
	CMP R5, #0
	BGT DIAGONAL_LINE4
	
	MOV R5, #5
	SUB R1, R1, #3
DIAGONAL_LINE5
	ADD R0, R0, #1
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	ADD R1, R1, #1
	BL DRAWPIXEL
	SUB R1, R1, #3
	SUB R5, R5, #1
	CMP R5, #0
	BGT DIAGONAL_LINE5


	POP {R0-R8, r10, PC}

DRAW_G
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 10
	;R7=y1 10
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#14
	MOV R4, R7
	ADD R4, R4, #3
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #3
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #20
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #12
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #8
	MOV R1, R7
	ADD R1, R1, #12
	MOV R3, R6
	ADD R3, R3, #16
	MOV R4, R7
	ADD R4, R4, #14
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}

DRAW_A
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 10
	;R7=y1 10
	;R8=color

	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #3
	MOV R3, R6
	ADD R3, R3 ,#3
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
		
	MOV R0, R6
	ADD R0, R0, #9
	MOV R1, R7
	ADD R1, R1, #3
	MOV R3, R6
	ADD R3, R3, #12
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #10
	MOV R3, R6
	ADD R3, R3, #9
	MOV R4, R7
	ADD R4, R4, #14
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	MOV R0, R6
	ADD R0, R0, #3
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #9
	MOV R4, R7
	ADD R4, R4, #3
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	POP {R0-R8, r10, PC}


DRAW_Y  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #9
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #14
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #18
	MOV R4, R7
	ADD R4, R4, #9
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #4
	MOV R1, R7
	ADD R1, R1, #9
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #13
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #7
	MOV R1, R7
	ADD R1, R1, #13
	MOV R3, R6
	ADD R3, R3, #11
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	
	POP {R0-R8, r10, PC}
    
	ENDFUNC

DRAW_U  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	

	MOV R0, R6
	ADD R0, R0 , #4
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #19
	LDR R10, =BLACK
	BL DRAW_RECTANGLE_FILLED
	
	POP {R0-R8, r10, PC}
	
    ENDFUNC
	
DRAW_X
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 220
	;R7=y1 5
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#5
	MOV R4, R7
	ADD R4, R4, #8
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #15
	MOV R4, R7
	ADD R4, R4, #8
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #5
	MOV R1, R7
	ADD R1, R1, #8
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #13
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #13
	MOV R3, R6
	ADD R3, R3, #5
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #13
	MOV R3, R6
	ADD R3, R3, #15
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}
	
DRAW_T
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 256
	;R7=y1 5
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#14
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
		
	MOV R0, R6
	ADD R0, R0, #5
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #9
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}


DRAW_I
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 241
	;R7=y1 5
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #18
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #3
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #7
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}

DRAW_E
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 84
	;R7=y1 5
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#16
	MOV R4, R7
	ADD R4, R4, #3
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #3
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #10
	MOV R3, R6
	ADD R3, R3, #12
	MOV R4, R7
	ADD R4, R4, #13
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #20
	MOV R3, R6
	ADD R3, R3, #16
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}
	
DRAW_S
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #3
	MOV R1, R7
	ADD R1, R1, #6
	MOV R3, R6
	SUB R3, R3 ,#1
	MOV R4, R7
	ADD R4, R4, #10
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #10
	MOV R3, R6
	ADD R3, R3, #8
	MOV R4, R7
	ADD R4, R4, #15
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #8
	MOV R1, R7
	ADD R1, R1, #15
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #19
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #3
	MOV R1, R7
	ADD R1, R1, #19
	MOV R3, R6
	ADD R3, R3, #8
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}
	
DRAW_L  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #4
	MOV R1, R7
	ADD R1, R1, #19
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	
	POP {R0-R8, r10, PC}
    
	ENDFUNC
DRAW_D  FUNCTION
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #4
	MOV R1, R7
	MOV R3, R6
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #18
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #5
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #18
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	POP {R0-R8, r10, PC}
    
	ENDFUNC

DRAW_R
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 64
	;R7=y1 5
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#4
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #5
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #11
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #11
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #16
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #8
	MOV R1, R7
	ADD R1, R1, #16
	MOV R3, R6
	ADD R3, R3, #12
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}
DRAW_C
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #4
	MOV R1, R7
	ADD R1, R1, #5
	MOV R3, R6
	MOV R4, R7
	ADD R4, R4, #18
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #18
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	

	POP {R0-R8, r10, PC}
	
DRAW_H
	PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 10
	;R7=y1 10
	;R8=color

	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3 ,#3
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
		
	MOV R0, R6
	ADD R0, R0, #9
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #12
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #9
	MOV R3, R6
	ADD R3, R3, #9
	MOV R4, R7
	ADD R4, R4, #13
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	POP {R0-R8, r10, PC}
	
DRAW_O
    PUSH {R0-R8, r10, LR}
	;coordinates of upper left corner
	;R6=x1 
	;R7=y1 
	;R8=color
	
	MOV R0, R6
	MOV R1, R7
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #5
	MOV R10, R8 
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	SUB R0, R0, #4
	MOV R1, R7
	ADD R1, R1, #5
	MOV R3, R6
	MOV R4, R7
	ADD R4, R4, #18
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	MOV R1, R7
	ADD R1, R1, #18
	MOV R3, R6
	ADD R3, R3, #10
	MOV R4, R7
	ADD R4, R4, #23
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	MOV R0, R6
	ADD R0, R0, #10
	MOV R1, R7
	ADD R1, R1, #5
	MOV R3, R6
	ADD R3, R3, #14
	MOV R4, R7
	ADD R4, R4, #18
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	
	
	POP {R0-R8, r10, PC}

;#####################################################################################################################################################################
DRAWPIXEL
	PUSH {R0-R5, r10, LR}
	;THIS FUNCTION TAKES X AND Y AND A COLOR AND DRAWS THIS EXACT PIXEL
	;NOTE YOU HAVE TO CALL ADDRESS SET ON A SPECIFIC PIXEL WITH LENGTH 1 AND WIDTH 1 FROM THE STARTING COORDINATES OF THE PIXEL, THOSE STARTING COORDINATES ARE GIVEN AS PARAMETERS
	;THEN YOU SIMPLY ISSUE MEMORY WRITE COMMAND AND SEND THE COLOR
	;R0 = X
	;R1 = Y
	;R10 = COLOR

	;CHIP SELECT ACTIVE, WRITE LOW TO CS
	LDR R3, =GPIOB_ODR_OFFSET
	LDR R4, [R3]
	MOV R5, #1
	LSL R5, #6
	MVN R5, R5
	AND R4, R4, R5
	STR R4, [R3]

	;SETTING PARAMETERS FOR FUNC 'ADDRESS_SET' CALL, THEN CALL FUNCTION ADDRESS SET
	;NOTE YOU MIGHT WANT TO PERFORM PARAMETER REORDERING, AS ADDRESS SET FUNCTION TAKES X1, X2, Y1, Y2 IN R0, R1, R3, R4 BUT THIS FUNCTION TAKES X,Y IN R0 AND R1
	MOV R3, R1 ;Y1
	ADD R1, R0, #1 ;X2
	ADD R4, R3, #1 ;Y2
	BL ADDRESS_SET


	
	;MEMORY WRITE
	MOV R2, #0x2C
	BL LCD_COMMAND_WRITE


	;SEND THE COLOR DATA | DATASHEET PAGE 114
	;REMINDER: WE USE 16-BIT PER PIXEL COLOR
	; SEND THE SINGLE COLOR, PASSED IN R10
	MOV R2, R10
	LSR R2, #8
	BL LCD_DATA_WRITE
	MOV R2, R10
	BL LCD_DATA_WRITE


	
	POP {R0-R5, r10, PC}
;#####################################################################################################################################################################


;	REVISE THE PREVIOUS TWO FUNCTIONS (ADDRESS_SET AND DRAW_PIXEL) WITH YOUR TA BEFORE PROCEEDING








;##########################################################################################################################################

DRAW_COIN
	push{R0-R10, LR}
	;Cordinate X of center of the circle : R5 
	;Cordinate Y of center of the circle : R6
	;Color: R10
	;Color of plus/minus R8
	;plus or minus : R9 (1 for plus and 0 for minus)
	mov R0, R5
	SUB R0, R0, #10
	mov R1, R6
	SUB R1, R1, #6
	MOV R3, R5
	ADD R3, R3, #10
	mov R4, R6
	ADD R4, R4, #6
	BL DRAW_RECTANGLE_FILLED
	
	mov R0, R5
	SUB R0, R0, #6
	mov R1, R6
	SUB R1, R1, #10
	MOV R3, R5
	ADD R3, R3, #6
	mov R4, R6
	ADD R4, R4, #10
	BL DRAW_RECTANGLE_FILLED	
	
	mov R0, R5
	SUB R0, R0, #8
	mov R1, R6
	SUB R1, R1, #8
	MOV R3, R5
	ADD R3, R3, #8
	mov R4, R6
	ADD R4, R4, #8
	BL DRAW_RECTANGLE_FILLED	

	CMP R9, #1
	BNE DRAW_MINUS
    B DRAW_PLUS ; in which case R9 is equal to 1


DRAW_MINUS
	MOV R0, R5
	SUB R0, R0, #4
	MOV R1, R6
	SUB R1, R1, #2
	MOV R3, R0
	ADD R3, R3, #7
	MOV R4, R1
	ADD R4, R4, #4
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED
	B CONTIN

DRAW_PLUS
	MOV R0, R5
	SUB R0, R0, #8
	MOV R1, R6
	SUB R1, R1, #1
	MOV R3, R5
	ADD R3 , R3, #8
	MOV R4, R6
	ADD R4, R4, #1
	MOV R10, R8
	BL DRAW_RECTANGLE_FILLED

	MOV R0, R5
	SUB R0, R0, #1
	MOV R1, R6
	SUB R1, R1, #8
	MOV R3, R5
	ADD R3 , R3, #1
	MOV R4, R6
	ADD R4, R4, #8
	BL DRAW_RECTANGLE_FILLED
	B CONTIN


CONTIN
	pop{R0-R10, PC}
	
DRAW_CIRCLE_FILLED 
	push{R0-R10, LR}
	;Cordinate X of center of the circle : R5 
	;Cordinate Y of center of the circle : R6
	;Color: R10
	mov R0, R5
	SUBS R0, R0, #10
	mov R1, R6
	SUBS R1, R1, #6
	MOV R3, R5
	ADD R3, R3, #10
	mov R4, R6
	ADD R4, R4, #6
	BL DRAW_RECTANGLE_FILLED
	
	mov R0, R5
	SUBS R0, R0, #6
	mov R1, R6
	SUBS R1, R1, #10
	MOV R3, R5
	ADD R3, R3, #6
	mov R4, R6
	ADD R4, R4, #10
	BL DRAW_RECTANGLE_FILLED	
	
	mov R0, R5
	SUBS R0, R0, #8
	mov R1, R6
	SUBS R1, R1, #8
	MOV R3, R5
	ADD R3, R3, #8
	mov R4, R6
	ADD R4, R4, #8
	BL DRAW_RECTANGLE_FILLED	

	pop{R0-R10, PC}

DRAW_RECTANGLE_FILLED
	;X1 = [] r0
	;Y1 = [] r1
	;X2 = [] r3
	;Y2 = [] r4
	;COLOR = [] r10
	
	
	PUSH {R0-R12, LR}
	
	push{r0-r4}


	PUSH {R1}
	PUSH {R3}
	
	pop {r1}
	pop {r3}
	
	;THE NEXT FUNCTION TAKES x1, x2, y1, y2
	;R0 = x1
	;R1 = x2
	;R3 = y1
	;R4 = y2
	bl ADDRESS_SET
	
	pop{r0-r4}
	

	SUBS R3, R3, R0
	add r3, r3, #1
	SUBS R4, R4, R1
	add r4, r4, #1
	MUL R3, R3, R4


;MEMORY WRITE
	MOV R2, #0x2C
	BL LCD_COMMAND_WRITE


RECT_FILL_LOOP
	MOV R2, R10
	LSR R2, #8
	BL LCD_DATA_WRITE
	MOV R2, R10
	BL LCD_DATA_WRITE

	SUBS R3, R3, #1
	CMP R3, #0
	BGT RECT_FILL_LOOP


END_RECT_FILL
	POP {R0-R12, PC}
;##########################################################################################################################################


	
LCD_WRITE FUNCTION
	;this function takes what is inside r2 and writes it to the tft
	;this function writes 8 bits only
	;later we will choose whether those 8 bits are considered a command, or just pure data
	;your job is to just write 8-bits (regardless if data or command) to PE0-7 and set WR appropriately
	;arguments: R2 = data to be written to the D0-7 bus

	PUSH {R0-R3, LR}


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETTING WR to 0 ;;;;;;;;;;;;;;;;;;;;;
	; RESET WR TO 0
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	LSL R3, #8
	MVN R3, R3
	AND R0, R0, R3
	STRH R0, [R1]
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;; HERE YOU PUT YOUR DATA which is in R2 TO PE0-7 ;;;;;;;;;;;;;;;;;
	;SET PE0-7 WITH THE LOWER 8-bits of R2
	LDR R1, =GPIOA_ODR_OFFSET
	STRB R2, [R1]			;only write the lower byte to PE0-7
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;;;;;;;;;;;;;;; SETTING WR to 1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;SET WR TO 1 AGAIN (ie make a rising edge)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #8
	STRH R0, [R1]
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	POP {R0-r3, PC}
	ENDFUNC
	

LCD_COMMAND_WRITE FUNCTION
	;this function writes a command to the TFT, the command is read from R2
	;it writes LOW to RS first to specify that we are writing a command not data.
	;then it normally calls the function LCD_WRITE we just defined above
	;arguments: R2 = data to be written on D0-7 bus


	PUSH {R0-R3, LR}
	


	;SET RD HIGH (we won't need reading anyways, but we must keep read pin to high, which means we will not read anything)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #9
	STRH R0, [R1]

	;;;;;;;;;;;;;;;;;;;;;;;;; SETTING RS to 0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;SET RS TO 0 (to specify that we are writing commands not data on the D0-7 bus)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	LSL R3, #7
	MVN R3, R3
	AND R0, R0, R3
	STRH R0, [R1]
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; CALL FUNCTION LCD_WRITE
	BL LCD_WRITE


	; POP ALL REGISTERS YOU PUSHED
	POP {R0-R3, PC}
	ENDFUNC




LCD_DATA_WRITE FUNCTION
	;this function writes Data to the TFT, the data is read from R2
	;it writes HIGH to RS first to specify that we are writing actual data not a command.
	;arguments: R2 = data

	PUSH {R0-R3, LR}

	; SET RD TO HIGH (we don't need to read anything)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #9
	STRH R0, [R1]

	;;;;;;;;;;;;;;;;;;;; SETTING RS to 1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; SET RS TO 1 (to specify that we are sending actual data not a command on the D0-7 bus)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #7
	STRH R0, [R1]
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; CALL FUNCTION LCD_WRITE
	BL LCD_WRITE

	; POP ANY REGISTER YOU PUSHED
	POP {R0-R3, PC}
	ENDFUNC


  
SETUP FUNCTION
	;THIS FUNCTION ENABLES PORT A & B, MARKS THEM AS OUTPUT, CONFIGURES SOME GPIO
	;THEN FINALLY IT CALLS LCD_INIT
	PUSH {R0-R12, LR}


	LDR R0, =RCC_APB2ENR
	LDR R1, [R0]
	MOV R2, #1
	ORR R1, R1, R2, LSL #0
	STR R1, [R0]
	
	LDR R0, =AFIO_MAPR
	LDR R1, [R0]
	MOV R2, #1
	ORR R1, R1, R2, LSL #25
	STR R1, [R0]


	;Make the clock affect port A by enabling the corresponding bit (the second bit) in RCC_APB2ENR register
	LDR R0, =RCC_APB2ENR
	LDR R1, [R0]
	MOV R2, #1
	ORR R1, R1, R2, LSL #2
	STR R1, [R0]
	
	;Make the clock affect port B by enabling the corresponding bit (the third bit) in RCC_APB2ENR register
	LDR R0, =RCC_APB2ENR
	LDR R1, [R0]
	MOV R2, #1
	ORR R1, R1, R2, LSL #3
	STR R1, [R0]
	
	;Make the clock affect port C by enabling the corresponding bit (the third bit) in RCC_APB2ENR register
	LDR R0, =RCC_APB2ENR
	LDR R1, [R0]
	MOV R2, #1
	ORR R1, R1, R2, LSL #4
	STR R1, [R0]
	
	
	;Make the GPIO A (lower byte) mode as output type push-pull and setting output speed to the maximum speed
	LDR R0, =GPIOA_CRL_OFFSET
	LDR R1, [R0]
	AND R1, R1 , #0x00000000
	ORR R1, R1 , #0x33333333
	STR R1,[R0]
	
	;Make the GPIO A (Higher byte) mode as input type push-pull
	LDR R0, =GPIOA_CRH_OFFSET
	LDR R1, [R0]
	AND R1, R1 , #0x00000000
	ORR R1, R1 , #0x88888888
	STR R1,[R0]
	
	;Make the GPIO B (B0, B1, B5, B6, AND B7) mode as output type push-pull and setting output speed to the maximum speed
	LDR R0, =GPIOB_CRL_OFFSET
	MOV R1, #0x33333333
	STR R1,[R0]

	LDR R0, =GPIOB_CRH_OFFSET
	MOV R1, #0x00330000
	ORR R1, #0x00000033
	ORR R1, #0x33000000
	ORR R1, #0x00008800
	STR R1,[R0]
	
	LDR R0, =GPIOB_ODR_OFFSET
	MOV R1, #0x0
	STR R1,[R0]
	
	;Make the GPIO C (Higher byte) mode as input type push-pull
	LDR R0, =GPIOC_CRH_OFFSET
	LDR R1, [R0]
	AND R1, R1 , #0x00000000
	ORR R1, R1 , #0x88888888
	STR R1,[R0]

	BL LCD_INIT

	POP {R0-R12, PC}	
	ENDFUNC
	
	
LCD_INIT FUNCTION
	;This function executes the minimum needed LCD initialization measures


  	PUSH {R0-R3, LR}

	;;;;;;;;;;;;;;;;; HARDWARE RESET (putting RST to high then low then high again) ;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; SET RESET PIN TO HIGH (THIS CORRESPONDS TO SETTING B7 TO HIGH)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #15
	STRH R0, [R1]

	; DELAY FOR SOME TIME
	BL delay_1_second

	; RESET RESET PIN TO LOW (SET B7 TO 0)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	LSL R3, #15
	MVN R3, R3
	AND R0, R0, R3
	STRH R0, [R1]

	; DELAY FOR SOME TIME
	BL delay_10_milli_second

	; SET RESET PIN TO HIGH AGAIN
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #15
	STRH R0, [R1]

	; DELAY FOR SOME TIME
	BL delay_1_second
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;






	;;;;;;;;;;;;;;;;; PREPARATION FOR WRITE CYCLE SEQUENCE (setting CS to high, then configuring WR and RD, then resetting CS to low) ;;;;;;;;;;;;;;;;;;
	;SET CS PIN HIGH (SET B6 TO HIGH)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #6
	STR R0, [R1]

	; SET WR PIN HIGH (B1)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #8
	STRH R0, [R1]

	; SET RD PIN HIGH (B0)
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	ORR R0, R0, R3, LSL #9
	STRH R0, [R1]

	; SET CS PIN LOW 
	LDR R1, =GPIOB_ODR_OFFSET
	LDR R0, [R1]
	MOV R3, #1
	LSL R3, #6
	MVN R3, R3
	AND R0, R0, R3
	STR R0, [R1]
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	




	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SOFTWARE INITIALIZATION SEQUENCE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; ISSUE THE "SET CONTRAST" COMMAND, ITS HEX CODE IS 0xC5
	MOV R2, #0xC5
	BL LCD_COMMAND_WRITE

	;THIS COMMAND REQUIRES 2 PARAMETERS TO BE SENT AS DATA, THE VCOM H, AND THE VCOM L
	;WE WANT TO SET VCOM H TO A SPECIFIC VOLTAGE WITH CORRESPONDS TO A BINARY CODE OF 1111111 OR 0x7F HEXA
	; SEND THE FIRST PARAMETER (THE VCOM H) NEEDED BY THE COMMAND, WITH HEX 0x7F, PARAMETERS ARE SENT AS DATA BUT COMMANDS ARE SENT AS COMMANDS
	MOV R2, #0x7F
	BL LCD_DATA_WRITE

	;WE WANT TO SET VCOM L TO A SPECIFIC VOLTAGE WITH CORRESPONDS TO A BINARY CODE OF 00000000 OR 0x00 HEXA
	; SEND THE SECOND PARAMETER (THE VCOM L) NEEDED BY THE CONTRAST COMMAND, WITH HEX 0x00, PARAMETERS ARE SENT AS DATA BUT COMMANDS ARE SENT AS COMMANDS
	MOV R2, #0x00
	BL LCD_DATA_WRITE


	;MEMORY ACCESS CONTROL AKA MADCLT | DATASHEET PAGE 127
	;WE WANT TO SET MX (to draw from left to right) AND SET MV (to configure the TFT to be in horizontal landscape mode, not a vertical screen)
	; ISSUE THE COMMAND MEMORY ACCESS CONTROL,
	MOV R2, #0x36
	BL LCD_COMMAND_WRITE

	; SEND ONE NEEDED PARAMETER ONLY WITH MX AND MV SET TO 1. HOW WILL WE SEND PARAMETERS? AS DATA OR AS COMMAND?
	MOV R2, #0x60
	BL LCD_DATA_WRITE



	;COLMOD: PIXEL FORMAT SET | DATASHEET PAGE 134
	;THIS COMMAND LETS US CHOOSE WHETHER WE WANT TO USE 16-BIT COLORS OR 18-BIT COLORS.
	MOV R2, #0x3A
	BL LCD_COMMAND_WRITE

	; SEND THE NEEDED PARAMETER WHICH CORRESPONDS TO 16-BIT RGB AND 16-BIT MCU INTERFACE FORMAT
	MOV R2, #0x55
	BL LCD_DATA_WRITE
	


	;SLEEP OUT | DATASHEET PAGE 101
	;ISSUE THE SLEEP OUT COMMAND TO EXIT SLEEP MODE (THIS COMMAND TAKES NO PARAMETERS, JUST SEND THE COMMAND)
	MOV R2, #0x11
	BL LCD_COMMAND_WRITE

	BL delay_1_second


	;DISPLAY ON | DATASHEET PAGE 109
	MOV R2, #0x29
	BL LCD_COMMAND_WRITE


	;COLOR INVERSION OFF 
	;NOTE: SOME TFTs HAS COLOR INVERTED BY DEFAULT, SO YOU WOULD HAVE TO INVERT THE COLOR MANUALLY SO COLORS APPEAR NATURAL
	;MEANING THAT IF THE COLORS ARE INVERTED WHILE YOU ALREADY TURNED OFF INVERSION, YOU HAVE TO TURN ON INVERSION NOT TURN IT OFF.
	;ISSUE THE COMMAND, IT TAKES NO PARAMETERS
	MOV R2, #0x20
	BL LCD_COMMAND_WRITE



	;MEMORY WRITE | DATASHEET PAGE 245
	;WE NEED TO PREPARE OUR TFT TO SEND PIXEL DATA, MEMORY WRITE SHOULD ALWAYS BE ISSUED BEFORE ANY PIXEL DATA SENT
	; ISSUE MEMORY WRITE COMMAND
	MOV R2, #0x2C
	BL LCD_COMMAND_WRITE	


	; POP ALL PUSHED REGISTERS
	POP {R0-R3, PC}
	ENDFUNC
	
delay_1_second FUNCTION
	;this function just delays for 1 second
	PUSH {R8, LR}
	LDR R8, =INTERVAL
delay_loop
	SUBS R8, #1
	CMP R8, #0
	BGE delay_loop
	POP {R8, PC}	
	ENDFUNC
	

delay_10_milli_second FUNCTION
	;this function just delays for 10 millisecondS
	PUSH {R8, LR}
	LDR R8, =INTERVAL
delay_loop3
	SUBS R8, #100
	CMP R8, #0
	BGE delay_loop3

	POP {R8, PC}
	ENDFUNC
	
	
delay_200_milli_second FUNCTION
	;this function just delays for 10 millisecondS
	PUSH {R8, LR}
	LDR R8, =INTERVAL
delay_loop4
	SUBS R8, #5
	CMP R8, #0
	BGE delay_loop4

	POP {R8, PC}
	ENDFUNC
	
delay_100_milli_second FUNCTION
	;this function just delays for 10 millisecondS
	PUSH {R8, LR}
	LDR R8, =INTERVAL
delay_loop9
	SUBS R8, #10
	CMP R8, #0
	BGE delay_loop9

	POP {R8, PC}
	ENDFUNC
	
	END